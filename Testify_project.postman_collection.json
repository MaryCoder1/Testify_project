{
	"info": {
		"_postman_id": "a450e9ff-c09e-4139-8576-b815e345f07d",
		"name": "Testify_project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26480150",
		"_collection_link": "https://interstellar-star-315865.postman.co/workspace/Testify-project~6f1de354-c26b-4aa5-961a-b6fd89cf9243/collection/26480150-a450e9ff-c09e-4139-8576-b815e345f07d?action=share&source=collection_link&creator=26480150"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Add a user",
					"item": [
						{
							"name": "Add a new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"Successfully creates new user\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating that creation is successfully in response body\r",
											"pm.test(\"creation of user is successful\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"pm.environment.set(\"user_id\", jsonData.data.id);\r",
											"pm.environment.get(\"user_id\");\r",
											"\r",
											"pm.environment.set(\"UserID1_email\", jsonData.data.name);\r",
											"pm.environment.get(\"UserID1_email\");\r",
											"\r",
											"pm.environment.set(\"UserID1_name\", jsonData.data.name);\r",
											"pm.environment.get(\"UserID1_name\");\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"it has user_id property\", function () {\r",
											"    pm.expect(jsonData.data).to.have.property(\"id\")\r",
											"});\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"data type of response body is correct\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.id)).to.be.true;\r",
											"    pm.expect(jsonData.data.name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.lang).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.lang)).to.be.true;\r",
											"  pm.expect(jsonData.data.locale).to.be.null;\r",
											"  pm.expect(jsonData.data.timezone_name).to.be.null;\r",
											"   pm.expect(jsonData.data.timezone_offset).to.be.null;\r",
											"    pm.expect(jsonData.data.default_currency).to.be.null;\r",
											"     pm.expect(jsonData.data.icon_url).to.be.null;\r",
											"      pm.expect(jsonData.data.active_flag).to.be.true;\r",
											"       pm.expect(jsonData.data.is_deleted).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data.role_id).to.be.a(\"number\");\r",
											"       pm.expect(Number.isInteger(jsonData.data.is_admin)).to.be.true;\r",
											"\r",
											"    \r",
											"  let timestamp = jsonData.data.created;  // Correct path\r",
											"\r",
											"let parsedDate = new Date(timestamp.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"pm.expect(jsonData.data.has_created_company).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data.is_you).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data.access).to.be.an(\"array\");\r",
											"pm.expect(jsonData.data.phone).to.be.null;\r",
											"\r",
											"let timestamp1 = jsonData.data.modified; // Correct path\r",
											"\r",
											"let parsedDate1 = new Date(timestamp1.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate1.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"//validating status code of api\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating response time\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"access\": [\n    {\n      \"app\": \"sales\"    }\n  ],\n  \"active_flag\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a new user to the company, returns the ID upon success."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "Forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"You do not have permissions to do this.\",\n  \"error_info\": \"Please check developers.pipedrive.com\",\n  \"data\": null,\n  \"additional_data\": null\n}"
								},
								{
									"name": "Add a new user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"access\": [\n    {\n      \"app\": \"sales\"    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 20 Feb 2025 18:14:51 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "CF-Ray",
											"value": "91507a7e2abed168-LHR"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "access-control-expose-headers",
											"value": "X-RateLimit-Remaining, X-RateLimit-Limit, X-RateLimit-Reset"
										},
										{
											"key": "badi",
											"value": "Routing: lon-2=>lon-2; Version: fd2a; Host: 6b4b57cf76-ms5kt;"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-correlation-id",
											"value": "c196d001-8a9d-48e0-ac7d-3813c0721bb5"
										},
										{
											"key": "x-daily-requests-left",
											"value": "9999"
										},
										{
											"key": "x-frame-options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "x-ratelimit-limit",
											"value": "80"
										},
										{
											"key": "x-ratelimit-remaining",
											"value": "79"
										},
										{
											"key": "x-ratelimit-reset",
											"value": "2"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/csp-reporting.cloudflare.com\\/cdn-cgi\\/script_monitor\\/report?m=eyRMOSSSYyHFWQ.dpj7BRYMV9tKsSQbRkZicIqtiHmY-1740075291-1.0.1.1-m7aUMyX3awMsckCsRCZ3HnQHvPg8aZb.kJuMMXTF5XoaqQAXh3m4liNthcWMNzvNSd9C_J.fwiV0iRVFpCVZqaekKEDbvOqsXcfjC4BEpud2WccGCstnMs5bnfNp_.2JwVuZ_qRO9dCco9E1zq7hWvAm62H40vO7hjOVQomh5GA\"}],\"group\":\"cf-csp-endpoint\",\"max_age\":86400}"
										},
										{
											"key": "Content-Security-Policy-Report-Only",
											"value": "script-src 'none'; report-uri https://csp-reporting.cloudflare.com/cdn-cgi/script_monitor/report?m=eyRMOSSSYyHFWQ.dpj7BRYMV9tKsSQbRkZicIqtiHmY-1740075291-1.0.1.1-m7aUMyX3awMsckCsRCZ3HnQHvPg8aZb.kJuMMXTF5XoaqQAXh3m4liNthcWMNzvNSd9C_J.fwiV0iRVFpCVZqaekKEDbvOqsXcfjC4BEpud2WccGCstnMs5bnfNp_.2JwVuZ_qRO9dCco9E1zq7hWvAm62H40vO7hjOVQomh5GA; report-to cf-csp-endpoint"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": 23188243,\n        \"name\": \"giuseppe.schamberger70@yahoo.com\",\n        \"email\": \"giuseppe.schamberger70@yahoo.com\",\n        \"lang\": 1,\n        \"locale\": null,\n        \"timezone_name\": null,\n        \"timezone_offset\": null,\n        \"default_currency\": null,\n        \"icon_url\": null,\n        \"active_flag\": true,\n        \"is_deleted\": false,\n        \"is_admin\": 0,\n        \"role_id\": 1,\n        \"created\": \"2025-02-20 18:14:50\",\n        \"has_created_company\": false,\n        \"is_you\": false,\n        \"access\": [\n            {\n                \"app\": \"sales\",\n                \"admin\": false,\n                \"permission_set_id\": \"d2ad5510-efa2-11ef-b79e-439298415cb9\"\n            },\n            {\n                \"app\": \"global\",\n                \"admin\": false,\n                \"permission_set_id\": \"d2b0b070-efa2-11ef-b79e-439298415cb9\"\n            }\n        ],\n        \"phone\": null,\n        \"modified\": \"2025-02-20 18:14:50\",\n        \"last_login\": null\n    }\n}"
								}
							]
						},
						{
							"name": "Inactive user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"Successfully creates new user\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"    });\r",
											"//validating response body structure\r",
											"var jsonData = pm.response.json();\r",
											"//validating response body structure\r",
											"pm.test(\"Response body is an object\", function()\r",
											" { console.log(jsonData)\r",
											"    pm.expect(jsonData).to.be.an(\"object\")\r",
											"});\r",
											"\r",
											"//validating response body structure\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
											"    \r",
											"    pm.expect(jsonData.data).to.have.property(\"id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"email\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"lang\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"active_flag\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"is_deleted\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"is_admin\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"role_id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"created\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"modified\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.data).to.have.property(\"access\").that.is.an(\"array\");\r",
											"    pm.expect(jsonData.data.access[0]).to.have.property(\"app\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data.access[0]).to.have.property(\"admin\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.access[0]).to.have.property(\"permission_set_id\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"\r",
											"//validating Responsetime\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"access\": [\n    {\n      \"app\": \"sales\"    }\n  ],\n  \"active_flag\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a new user to the company, returns the ID upon success."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "Forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"You do not have permissions to do this.\",\n  \"error_info\": \"Please check developers.pipedrive.com\",\n  \"data\": null,\n  \"additional_data\": null\n}"
								}
							]
						},
						{
							"name": "Forbidden user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"Forbidden user status code\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403,400])});\r",
											"//validating response body structure\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"validating response body stricture\", function() {pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"pm.expect(jsonData.data).to.be.null;\r",
											"\r",
											"pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"\r",
											"//validating response body structure\r",
											"pm.test(\"Response body is an object\", function() {\r",
											"    pm.expect(jsonData).to.be.an(\"object\")\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "c074d69d8f8187fe64d35965125f4fe26496ba58",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"access\": [\n    {\n      \"app\": \"sales\"    }\n  ],\n  \"active_flag\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a new user to the company, returns the ID upon success."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "Forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"You do not have permissions to do this.\",\n  \"error_info\": \"Please check developers.pipedrive.com\",\n  \"data\": null,\n  \"additional_data\": null\n}"
								}
							]
						},
						{
							"name": "Add a new user - negative test case(missing access_app fiield)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is a bad request, as Access_app is a required field \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(400)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Access_app is a required field\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"Access_app is a required field\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"    \r",
											" \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"access\": [\n    {\n      \"app\": \"\"    }\n  ],\n  \"active_flag\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a new user to the company, returns the ID upon success."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "Forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"You do not have permissions to do this.\",\n  \"error_info\": \"Please check developers.pipedrive.com\",\n  \"data\": null,\n  \"additional_data\": null\n}"
								}
							]
						},
						{
							"name": "Add a new user - negative test case(duplicate email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"Email already exist\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409,400])\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Email already exist\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"Email already exist\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{UserID1_email}}\",\n  \"access\": [\n    {\n      \"app\": \"sales\"    }\n  ],\n  \"active_flag\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a new user to the company, returns the ID upon success."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "Forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"You do not have permissions to do this.\",\n  \"error_info\": \"Please check developers.pipedrive.com\",\n  \"data\": null,\n  \"additional_data\": null\n}"
								}
							]
						},
						{
							"name": "Add a new user - negative test case(missing required field-email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is a bad request, as email is a required field \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(400)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Email is a required field\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"Email is a required field\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"\",\n  \"access\": [\n    {\n      \"app\": \"sales\"    }\n  ],\n  \"active_flag\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a new user to the company, returns the ID upon success."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "Forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"You do not have permissions to do this.\",\n  \"error_info\": \"Please check developers.pipedrive.com\",\n  \"data\": null,\n  \"additional_data\": null\n}"
								}
							]
						},
						{
							"name": "Add a new user - negative test case(unauthorized user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"\",\n  \"access\": [\n    {\n      \"app\": \"sales\"    }\n  ],\n  \"active_flag\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a new user to the company, returns the ID upon success."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "Forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"access\": [\n    {\n      \"app\": \"sales\"\n    }\n  ],\n  \"active_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"You do not have permissions to do this.\",\n  \"error_info\": \"Please check developers.pipedrive.com\",\n  \"data\": null,\n  \"additional_data\": null\n}"
								}
							]
						}
					],
					"description": "This folder comprises of both positive and negative test cases when creating a user"
				},
				{
					"name": "Get all users",
					"item": [
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"//saving user_id in the response body to active environment\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"All users retrieved successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Validating that creation is successfully in response body\r",
											"pm.test(\"creation of user is successful\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"data type of response body is correct\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data[1].id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[1].id)).to.be.true;\r",
											"    pm.expect(jsonData.data[1].name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[1].email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[1].lang).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[1].lang)).to.be.true;\r",
											"  pm.expect(jsonData.data[1].locale).to.be.null;\r",
											"  pm.expect(jsonData.data[1].timezone_name).to.be.null;\r",
											"   pm.expect(jsonData.data[1].timezone_offset).to.be.null;\r",
											"    pm.expect(jsonData.data[1].default_currency).to.be.null;\r",
											"     pm.expect(jsonData.data[1].icon_url).to.be.null;\r",
											"      pm.expect(jsonData.data[1].active_flag).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data[1].is_deleted).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data[1].role_id).to.be.a(\"number\");\r",
											"       pm.expect(jsonData.data[1].is_admin).to.be.a(\"number\");\r",
											"       console.log(typeof jsonData.data[1].is_admin, jsonData.data[1].is_admin);\r",
											"\r",
											"       pm.expect(Number.isInteger(jsonData.data[1].is_admin)).to.be.true;\r",
											"\r",
											"    \r",
											"  let timestamp = jsonData.data[1].created;  // Correct path\r",
											"\r",
											"let parsedDate = new Date(timestamp.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate.getTime())).to.be.false;\r",
											" // Check if valid date\r",
											"\r",
											"pm.expect(jsonData.data[1].has_created_company).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[1].is_you).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[1].access).to.be.an(\"array\");\r",
											"pm.expect(jsonData.data[1].phone).to.be.null;\r",
											"\r",
											"let timestamp1 = jsonData.data[1].modified; // Correct path\r",
											"\r",
											"let parsedDate1 = new Date(timestamp1.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate.getTime())).to.be.false;\r",
											" // Check if valid date\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"//validating responsebody structure\r",
											"pm.test(\"Response body is an object\", function() {\r",
											"    pm.expect(jsonData).to.be.an(\"object\")\r",
											"});\r",
											"\r",
											"pm.test(\"Fail if Content-Type is missing\", function () {\r",
											"    let contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType, \"Content-Type header is missing\").to.not.be.undefined;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//validating required header is being passed\r",
											"\r",
											"pm.test(\"User list is not empty\", function () {\r",
											"    pm.expect(jsonData.data.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Returns data about all users within the company."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all users - unauthorized user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"//validating response body\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Returns data about all users within the company."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Get user- find by name",
					"item": [
						{
							"name": "Find users by name- when term is fetching result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"//validating status code\r",
											"pm.test(\"status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating content_type\r",
											"pm.test(\"Content-Type is not missing\", function() {\r",
											"    let contentType = pm.response.headers.get(\"Content-Type\"); \r",
											"    pm.expect(contentType, \"Content-Type header is missing\").to.not.be.undefined;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"operation is successful\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"data type of response body is correct\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    console.log(jsonData.data[0].id);\r",
											"    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].id)).to.be.true;\r",
											"    pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].lang).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].lang)).to.be.true;\r",
											"  pm.expect(jsonData.data[0].locale).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data[0].timezone_name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.data[0].timezone_offset).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].default_currency).to.be.a(\"string\");\r",
											"     pm.expect(jsonData.data[0].icon_url).to.be.a(\"string\");\r",
											"      pm.expect(jsonData.data[0].active_flag).to.be.true;\r",
											"       pm.expect(jsonData.data[0].is_deleted).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data[0].role_id).to.be.a(\"number\");\r",
											"       pm.expect(Number.isInteger(jsonData.data[0].is_admin)).to.be.true;\r",
											"\r",
											"    \r",
											"  let timestamp = jsonData.data[0].created;  // Correct path\r",
											"\r",
											"let parsedDate = new Date(timestamp.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"pm.expect(jsonData.data[0].has_created_company).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].is_you).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].access).to.be.an(\"array\");\r",
											"pm.expect(jsonData.data[0].phone).to.be.a(\"string\");\r",
											"\r",
											"let timestamp1 = jsonData.data[0].modified; // Correct path\r",
											"\r",
											"let parsedDate1 = new Date(timestamp1.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate1.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"User list is not empty\", function () {\r",
											"    pm.expect(jsonData.data.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"User email contains search term\", function () {\r",
											"    let jsonData = pm.response.json(); // Parse JSON response\r",
											"    let searchTerm = pm.variables.get(\"search_term\"); // Get search term from Postman variables\r",
											"\r",
											"    pm.expect(jsonData).to.have.nested.property(\"success\", true); // Ensure success is true\r",
											"    pm.expect(jsonData).to.have.nested.property(\"data\").that.is.an(\"array\").that.is.not.empty; // Ensure data is a non-empty array\r",
											"\r",
											"    \r",
											"    let found = jsonData.data.some(user => pm.expect(user).to.have.property(\"email\") && user.email.includes(searchTerm));\r",
											"\r",
											"    pm.expect(found).to.be.true; // Ensure at least one match is found\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/find?term={{search_term}}&search_by_email=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"find"
									],
									"query": [
										{
											"key": "term",
											"value": "{{search_term}}",
											"description": "(Required) The search term to look for"
										},
										{
											"key": "search_by_email",
											"value": "0",
											"description": "When enabled, the term will only be matched against email addresses of users. Default: `false`."
										}
									]
								},
								"description": "Finds users by their name."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/find?term=<string>&search_by_email=0&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"find"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "search_by_email",
													"value": "0"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Find users by name- full email search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Validating that creation is successfully in response body\r",
											"pm.test(\"creation of user is successful\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"//validating response body\r",
											"pm.test(\"Content-Type is not missing\", function() {\r",
											"    let contentType = pm.response.headers.get(\"Content-Type\"); \r",
											"    pm.expect(contentType, \"Content-Type header is missing\").to.not.be.undefined;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//retrieving user_ids\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"data type of response body is correct\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    console.log(jsonData.data[0].id);\r",
											"    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].id)).to.be.true;\r",
											"    pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].lang).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].lang)).to.be.true;\r",
											"  pm.expect(jsonData.data[0].locale).to.be.null;\r",
											"  pm.expect(jsonData.data[0].timezone_name).to.be.null;\r",
											"   pm.expect(jsonData.data[0].timezone_offset).to.be.null;\r",
											"    pm.expect(jsonData.data[0].default_currency).to.be.null;\r",
											"     pm.expect(jsonData.data[0].icon_url).to.be.null;\r",
											"      pm.expect(jsonData.data[0].active_flag).to.be.true;\r",
											"       pm.expect(jsonData.data[0].is_deleted).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data[0].role_id).to.be.a(\"number\");\r",
											"       pm.expect(Number.isInteger(jsonData.data[0].is_admin)).to.be.true;\r",
											"\r",
											"    \r",
											"  let timestamp = jsonData.data[0].created;  // Correct path\r",
											"\r",
											"let parsedDate = new Date(timestamp.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"pm.expect(jsonData.data[0].has_created_company).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].is_you).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].access).to.be.an(\"array\");\r",
											"pm.expect(jsonData.data[0].phone).to.be.null;\r",
											"\r",
											"let timestamp1 = jsonData.data[0].modified; // Correct path\r",
											"\r",
											"let parsedDate1 = new Date(timestamp1.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate1.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Search term was successful\", function () {\r",
											"    let jsonData = pm.response.json(); // Parse JSON response\r",
											"    let searchEmail = pm.variables.get(\"UserID1_email\"); // Get email from Postman variables\r",
											"\r",
											"    pm.expect(jsonData).to.have.nested.property(\"data\").that.is.an(\"array\").that.is.not.empty; // Ensure data array exists\r",
											"\r",
											"    let found = jsonData.data.some(user => pm.expect(user).to.have.property(\"email\") && user.email.includes(searchEmail));\r",
											"\r",
											"    pm.expect(found).to.be.true; // Ensure at least one email contains the search term\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"User list is not empty\", function () {\r",
											"    pm.expect(jsonData.data.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/find?term={{UserID1_email}}&search_by_email=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"find"
									],
									"query": [
										{
											"key": "term",
											"value": "{{UserID1_email}}",
											"description": "(Required) The search term to look for"
										},
										{
											"key": "search_by_email",
											"value": "1",
											"description": "When enabled, the term will only be matched against email addresses of users. Default: `false`."
										}
									]
								},
								"description": "Finds users by their name."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/find?term=<string>&search_by_email=0&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"find"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "search_by_email",
													"value": "0"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Find users by name- partial search by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"//saving user_id in the response body to active environment\r",
											"\r",
											"\r",
											"//setting company_id in active environemt\r",
											"\r",
											"//retrieving company_id in active environment\r",
											"\r",
											"\r",
											"// confirming status of resource creation on server\r",
											"\r",
											"//converting response body to json format \r",
											"\r",
											"\r",
											"//Validating that creation is successfully in response body\r",
											"pm.test(\"creation of user is successful\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//retrieving user_ids\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"data type of response body is correct\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    console.log(jsonData.data[0].id);\r",
											"    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].id)).to.be.true;\r",
											"    pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].lang).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].lang)).to.be.true;\r",
											"  pm.expect(jsonData.data[0].locale).to.be.null;\r",
											"  pm.expect(jsonData.data[0].timezone_name).to.be.null;\r",
											"   pm.expect(jsonData.data[0].timezone_offset).to.be.null;\r",
											"    pm.expect(jsonData.data[0].default_currency).to.be.null;\r",
											"     pm.expect(jsonData.data[0].icon_url).to.be.null;\r",
											"      pm.expect(jsonData.data[0].active_flag).to.be.true;\r",
											"       pm.expect(jsonData.data[0].is_deleted).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data[0].role_id).to.be.a(\"number\");\r",
											"       pm.expect(Number.isInteger(jsonData.data[0].is_admin)).to.be.true;\r",
											"\r",
											"    \r",
											"  let timestamp = jsonData.data[0].created;  // Correct path\r",
											"\r",
											"let parsedDate = new Date(timestamp.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"pm.expect(jsonData.data[0].has_created_company).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].is_you).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].access).to.be.an(\"array\");\r",
											"pm.expect(jsonData.data[0].phone).to.be.null;\r",
											"\r",
											"let timestamp1 = jsonData.data[0].modified; // Correct path\r",
											"\r",
											"let parsedDate1 = new Date(timestamp1.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate1.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});\r",
											"\r",
											"pm.test(\"User list is not empty\", function () {\r",
											"    pm.expect(jsonData.data.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let email = pm.environment.get(\"UserID1_email\"); // Retrieve stored email\r",
											"\r",
											"if (email) {\r",
											"    let extractedName = email.split(\"@\")[0].match(/^[a-zA-Z]+/)[0]; \r",
											"    \r",
											"    pm.environment.set(\"ExtractedUserID\", extractedName); // Store extracted name\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/find?term={{ExtractedUserID}}&search_by_email=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"find"
									],
									"query": [
										{
											"key": "term",
											"value": "{{ExtractedUserID}}",
											"description": "(Required) The search term to look for"
										},
										{
											"key": "search_by_email",
											"value": "1",
											"description": "When enabled, the term will only be matched against email addresses of users. Default: `false`."
										}
									]
								},
								"description": "Finds users by their name."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/find?term=<string>&search_by_email=0&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"find"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "search_by_email",
													"value": "0"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Missing required parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//validating status code\r",
											"pm.test(\"Fails when 'term' parameter is missing\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]); \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//validating response body datatype\r",
											"pm.test(\"response body is in aliance with data structure\", function() {\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error.length).to.be.greaterThan(0);\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info.length).to.be.greaterThan(0);\r",
											"    \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"     pm.expect(jsonData.additional_data).to.be.null;\r",
											"    \r",
											"     pm.expect(jsonData.code).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"//validating error message\r",
											"pm.test(\"Error message is well spelt out\", function() {\r",
											" pm.expect(jsonData.error).to.include(\"querystring must have required property\");\r",
											" pm.expect(jsonData.error_info).to.include(\"Please check developers.pipedrive.com\");\r",
											"  pm.expect(jsonData.code).to.include(\"ERR_SCHEMA_VALIDATION_FAILED\");\r",
											" });\r",
											"\r",
											"\r",
											"pm.test(\"responseTime is less than 3000ms\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/find?search_by_email=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"find"
									],
									"query": [
										{
											"key": "term",
											"value": "aafo",
											"description": "(Required) The search term to look for",
											"disabled": true
										},
										{
											"key": "search_by_email",
											"value": "1",
											"description": "When enabled, the term will only be matched against email addresses of users. Default: `false`."
										}
									]
								},
								"description": "Finds users by their name."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/find?term=<string>&search_by_email=0&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"find"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "search_by_email",
													"value": "0"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Wrong parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//validating status code\r",
											"pm.test(\"Fails when wrong parameter is passed\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]); // Expecting a client error response\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//validating response body datatype\r",
											"pm.test(\"response body is in aliance with data structure\", function() {\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error.length).to.be.greaterThan(0);\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info.length).to.be.greaterThan(0);\r",
											"    \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"     pm.expect(jsonData.additional_data).to.be.null;\r",
											"    \r",
											"     pm.expect(jsonData.code).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"//validating error message\r",
											"pm.test(\"Error message is well spelt out\", function() {\r",
											" pm.expect(jsonData.error).to.include(\"wrong parameter passed\");\r",
											" pm.expect(jsonData.error_info).to.include(\"Please check developers.pipedrive.com\");\r",
											"  pm.expect(jsonData.code).to.include(\"ERR_SCHEMA_VALIDATION_FAILED\");\r",
											" });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/find?term=aafo&search_by_email1=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"find"
									],
									"query": [
										{
											"key": "term",
											"value": "aafo",
											"description": "(Required) The search term to look for"
										},
										{
											"key": "search_by_email1",
											"value": "1",
											"description": "When enabled, the term will only be matched against email addresses of users. Default: `false`."
										}
									]
								},
								"description": "Finds users by their name."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/find?term=<string>&search_by_email=0&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"find"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "search_by_email",
													"value": "0"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Find users by name- when term is not fetching result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating that creation is successfully in response body\r",
											"pm.test(\"operation  is successful\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200) });\r",
											"   pm.test(\"Response body valdaition\", function() { pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.data.length).to.equal(0);\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/find?term=mary.afolayan@miva.edu.ng&search_by_email=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"find"
									],
									"query": [
										{
											"key": "term",
											"value": "mary.afolayan@miva.edu.ng",
											"description": "(Required) The search term to look for"
										},
										{
											"key": "search_by_email",
											"value": "1",
											"description": "When enabled, the term will only be matched against email addresses of users. Default: `false`."
										}
									]
								},
								"description": "Finds users by their name."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/find?term=<string>&search_by_email=0&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"find"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "search_by_email",
													"value": "0"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Find users by name- when term is fetching result[CASE_SENSIIVITY]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"//saving user_id in the response body to active environment\r",
											"\r",
											"\r",
											"//setting company_id in active environemt\r",
											"\r",
											"//retrieving company_id in active environment\r",
											"\r",
											"pm.test(\"status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// confirming status of resource creation on server\r",
											"\r",
											"//converting response body to json format \r",
											"\r",
											"\r",
											"//Validating that creation is successfully in response body\r",
											"pm.test(\"Fetching of user is successful\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//retrieving user_ids\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"data type of response body is correct\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    console.log(jsonData.data[0].id);\r",
											"    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].id)).to.be.true;\r",
											"    pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].lang).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].lang)).to.be.true;\r",
											"  pm.expect(jsonData.data[0].locale).to.be.null;\r",
											"  pm.expect(jsonData.data[0].timezone_name).to.be.null;\r",
											"   pm.expect(jsonData.data[0].timezone_offset).to.be.null;\r",
											"    pm.expect(jsonData.data[0].default_currency).to.be.null;\r",
											"     pm.expect(jsonData.data[0].icon_url).to.be.null;\r",
											"      pm.expect(jsonData.data[0].active_flag).to.be.true;\r",
											"       pm.expect(jsonData.data[0].is_deleted).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data[0].role_id).to.be.a(\"number\");\r",
											"       pm.expect(Number.isInteger(jsonData.data[0].is_admin)).to.be.true;\r",
											"\r",
											"    \r",
											"  let timestamp = jsonData.data[0].created;  // Correct path\r",
											"\r",
											"let parsedDate = new Date(timestamp.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"pm.expect(jsonData.data[0].has_created_company).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].is_you).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].access).to.be.an(\"array\");\r",
											"pm.expect(jsonData.data[0].phone).to.be.null;\r",
											"\r",
											"let timestamp1 = jsonData.data[0].modified; // Correct path\r",
											"\r",
											"let parsedDate1 = new Date(timestamp1.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate1.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});\r",
											"\r",
											"pm.test(\"User list is not empty\", function () {\r",
											"    pm.expect(jsonData.data.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let email = pm.environment.get(\"UserID1_email\"); // Retrieve stored email\r",
											"\r",
											"if (email) {\r",
											"    let extractedName = email.split(\"@\")[0].match(/^[a-zA-Z]+/)[0].toUpperCase(); \r",
											"    \r",
											"    pm.environment.set(\"UpperCaseUserID\", extractedName); // Store in uppercase\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/find?term={{UpperCaseUserID}}&search_by_email=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"find"
									],
									"query": [
										{
											"key": "term",
											"value": "{{UpperCaseUserID}}",
											"description": "(Required) The search term to look for"
										},
										{
											"key": "search_by_email",
											"value": "1",
											"description": "When enabled, the term will only be matched against email addresses of users. Default: `false`."
										}
									]
								},
								"description": "Finds users by their name."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/find?term=<string>&search_by_email=0&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"find"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "search_by_email",
													"value": "0"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all users - unauthorized user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/find?term=mary.afolayan@miva.edu.ng&search_by_email=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"find"
									],
									"query": [
										{
											"key": "term",
											"value": "mary.afolayan@miva.edu.ng"
										},
										{
											"key": "search_by_email",
											"value": "1"
										}
									]
								},
								"description": "Returns data about all users within the company."
							},
							"response": [
								{
									"name": "The list of user objects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"john@pipedrive.com\",\n      \"phone\": \"0000-0001\",\n      \"activated\": true,\n      \"last_login\": \"2019-11-21 08:45:56\",\n      \"created\": \"2018-11-13 09:16:26\",\n      \"modified\": \"2019-11-21 08:45:56\",\n      \"has_created_company\": true,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": true,\n          \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        },\n        {\n          \"app\": \"account_settings\",\n          \"admin\": true,\n          \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n      \"is_you\": true,\n      \"is_deleted\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\",\n      \"default_currency\": \"EUR\",\n      \"locale\": \"et_EE\",\n      \"lang\": 1,\n      \"email\": \"jane@pipedrive.com\",\n      \"phone\": \"0000-0002\",\n      \"activated\": true,\n      \"last_login\": \"2019-09-11 11:43:54\",\n      \"created\": \"2019-01-22 10:43:47\",\n      \"modified\": \"2019-11-21 09:49:50\",\n      \"has_created_company\": false,\n      \"access\": [\n        {\n          \"app\": \"sales\",\n          \"admin\": false,\n          \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n        },\n        {\n          \"app\": \"global\",\n          \"admin\": true,\n          \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n        }\n      ],\n      \"active_flag\": true,\n      \"timezone_name\": \"Europe/Berlin\",\n      \"timezone_offset\": \"+03:00\",\n      \"role_id\": 1,\n      \"icon_url\": null,\n      \"is_you\": false,\n      \"is_deleted\": false\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Get current user data",
					"item": [
						{
							"name": "Get current user data- positive test case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"data type of response body is correct\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    console.log(jsonData.data.id);\r",
											"    pm.expect(jsonData.data.id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.id)).to.be.true;\r",
											"    pm.expect(jsonData.data.name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.lang).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.lang)).to.be.true;\r",
											"  pm.expect(jsonData.data.locale).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data.timezone_name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.data.timezone_offset).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.default_currency).to.be.a(\"string\");\r",
											"     pm.expect(jsonData.data.icon_url).to.be.a(\"string\");\r",
											"      pm.expect(jsonData.data.active_flag).to.be.true;\r",
											"       pm.expect(jsonData.data.is_deleted).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data.role_id).to.be.a(\"number\");\r",
											"       pm.expect(Number.isInteger(jsonData.data.is_admin)).to.be.true;\r",
											"\r",
											"    \r",
											"  let timestamp = jsonData.data.created;  // Correct path\r",
											"\r",
											"let parsedDate = new Date(timestamp.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"pm.expect(jsonData.data.has_created_company).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data.is_you).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data.access).to.be.an(\"array\");\r",
											"pm.expect(jsonData.data.phone).to.be.a(\"string\");\r",
											"\r",
											"let timestamp1 = jsonData.data.modified; // Correct path\r",
											"\r",
											"let parsedDate1 = new Date(timestamp1.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate1.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"status code is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											";\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means 'Date/number format' in the Pipedrive account settings, not the chosen language."
							},
							"response": [
								{
									"name": "The data of the logged in user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Me\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"me@pipedrive.com\",\n    \"phone\": \"0000-0000\",\n    \"activated\": true,\n    \"last_login\": \"2019-11-21 08:45:56\",\n    \"created\": \"2018-11-13 09:16:26\",\n    \"modified\": \"2019-11-21 08:45:56\",\n    \"has_created_company\": true,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": true,\n        \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      },\n      {\n        \"app\": \"account_settings\",\n        \"admin\": true,\n        \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n    \"is_you\": true,\n    \"is_deleted\": false,\n    \"company_id\": 54235233,\n    \"company_name\": \"Pipedrive\",\n    \"company_domain\": \"pipedrive-12g53f\",\n    \"company_country\": \"EE\",\n    \"company_industry\": \"IT Services\",\n    \"language\": {\n      \"language_code\": \"en\",\n      \"country_code\": \"US\"\n    }\n  }\n}"
								},
								{
									"name": "Unauthorized response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"unauthorized access\",\n  \"errorCode\": 401\n}"
								}
							]
						},
						{
							"name": "Get current user data- Invalid bearer token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "3228691814c297246f24ce4d12dae676630836700",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means 'Date/number format' in the Pipedrive account settings, not the chosen language."
							},
							"response": [
								{
									"name": "The data of the logged in user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Me\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"me@pipedrive.com\",\n    \"phone\": \"0000-0000\",\n    \"activated\": true,\n    \"last_login\": \"2019-11-21 08:45:56\",\n    \"created\": \"2018-11-13 09:16:26\",\n    \"modified\": \"2019-11-21 08:45:56\",\n    \"has_created_company\": true,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": true,\n        \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      },\n      {\n        \"app\": \"account_settings\",\n        \"admin\": true,\n        \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n    \"is_you\": true,\n    \"is_deleted\": false,\n    \"company_id\": 54235233,\n    \"company_name\": \"Pipedrive\",\n    \"company_domain\": \"pipedrive-12g53f\",\n    \"company_country\": \"EE\",\n    \"company_industry\": \"IT Services\",\n    \"language\": {\n      \"language_code\": \"en\",\n      \"country_code\": \"US\"\n    }\n  }\n}"
								},
								{
									"name": "Unauthorized response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"unauthorized access\",\n  \"errorCode\": 401\n}"
								}
							]
						},
						{
							"name": "Get current user data- Missing bearer token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means 'Date/number format' in the Pipedrive account settings, not the chosen language."
							},
							"response": [
								{
									"name": "The data of the logged in user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Me\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"me@pipedrive.com\",\n    \"phone\": \"0000-0000\",\n    \"activated\": true,\n    \"last_login\": \"2019-11-21 08:45:56\",\n    \"created\": \"2018-11-13 09:16:26\",\n    \"modified\": \"2019-11-21 08:45:56\",\n    \"has_created_company\": true,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": true,\n        \"permission_set_id\": \"62cc4d7f-4038-4352-abf3-a8c1c822b631\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      },\n      {\n        \"app\": \"account_settings\",\n        \"admin\": true,\n        \"permission_set_id\": \"982c5ce5-b8ba-4b47-b102-9da024f4b990\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": \"https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/WPVG_icon_2016.svg/1024px-WPVG_icon_2016.svg.png\",\n    \"is_you\": true,\n    \"is_deleted\": false,\n    \"company_id\": 54235233,\n    \"company_name\": \"Pipedrive\",\n    \"company_domain\": \"pipedrive-12g53f\",\n    \"company_country\": \"EE\",\n    \"company_industry\": \"IT Services\",\n    \"language\": {\n      \"language_code\": \"en\",\n      \"country_code\": \"US\"\n    }\n  }\n}"
								},
								{
									"name": "Unauthorized response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"unauthorized access\",\n  \"errorCode\": 401\n}"
								}
							]
						}
					]
				},
				{
					"name": "Get one user",
					"item": [
						{
							"name": "Get one user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"Successful operation\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating that creation is successfully in response body\r",
											"pm.test(\"creation of user is successful\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//retrieving user_ids\r",
											"pm.environment.set(\"UserID_2\",jsonData.data.id);\r",
											"pm.environment.get(\"UserID_2\");\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"data type of response body is correct\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.id)).to.be.true;\r",
											"    pm.expect(jsonData.data.name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.lang).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.lang)).to.be.true;\r",
											"  pm.expect(jsonData.data.locale).to.be.null;\r",
											"  pm.expect(jsonData.data.timezone_name).to.be.null;\r",
											"   pm.expect(jsonData.data.timezone_offset).to.be.null;\r",
											"    pm.expect(jsonData.data.default_currency).to.be.null;\r",
											"     pm.expect(jsonData.data.icon_url).to.be.null;\r",
											"      pm.expect(jsonData.data.active_flag).to.be.true;\r",
											"       pm.expect(jsonData.data.is_deleted).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data.role_id).to.be.a(\"number\");\r",
											"       pm.expect(Number.isInteger(jsonData.data.is_admin)).to.be.true;\r",
											"\r",
											"    \r",
											"  let timestamp = jsonData.data.created;  // Correct path\r",
											"\r",
											"let parsedDate = new Date(timestamp.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"pm.expect(jsonData.data.has_created_company).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data.is_you).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data.access).to.be.an(\"array\");\r",
											"pm.expect(jsonData.data.phone).to.be.null;\r",
											"\r",
											"let timestamp1 = jsonData.data.modified; // Correct path\r",
											"\r",
											"let parsedDate1 = new Date(timestamp1.replace(\" \", \"T\")); // Convert to ISO-like format\r",
											"pm.expect(isNaN(parsedDate1.getTime())).to.be.false; // Check if valid date\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{user_id}}",
											"description": "(Required) The ID "
										}
									]
								},
								"description": "Returns data about a specific user within the company."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "User with specified ID does not exist or is inaccessible",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"User not found or not accessible.\"\n}"
								}
							]
						},
						{
							"name": "Non - existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"User does not exist\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(404)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"User doesn't belong to company field\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"User does not belong to the company\")\r",
											"    });\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"    });\r",
											"\r",
											"    pm.test(\"validating response message\", function() {\r",
											" pm.expect(jsonData.error).to.include(\"User does not belong to the company\");\r",
											"  pm.expect(jsonData.error_info).to.include(\"Please check developers.pipedrive.com\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "231581360000000009",
											"description": "(Required) The ID of the user"
										}
									]
								},
								"description": "Returns data about a specific user within the company."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "User with specified ID does not exist or is inaccessible",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"User not found or not accessible.\"\n}"
								}
							]
						},
						{
							"name": "Unauthorised user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{user_id}}",
											"description": "(Required) The ID of the user"
										}
									]
								},
								"description": "Returns data about a specific user within the company."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "User with specified ID does not exist or is inaccessible",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"User not found or not accessible.\"\n}"
								}
							]
						},
						{
							"name": "Invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//validating status code\r",
											"pm.test(\"Fails when id is less than 1\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]); // Expecting a client error response\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//validating response body datatype\r",
											"pm.test(\"response body is in aliance with data structure\", function() {\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error.length).to.be.greaterThan(0);\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info.length).to.be.greaterThan(0);\r",
											"    \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"     pm.expect(jsonData.additional_data).to.be.null;\r",
											"    \r",
											"    // pm.expect(jsonData.code).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"//validating error message\r",
											"pm.test(\"Error message is well spelt out\", function() {\r",
											" pm.expect(jsonData.error).to.include(\"params/userId must be >= 1\");\r",
											" pm.expect(jsonData.error_info).to.include(\"Please check developers.pipedrive.com\");\r",
											"  /*pm.expect(jsonData.code).to.include(\"ERR_SCHEMA_VALIDATION_FAILED\");*/\r",
											" });\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "mary",
											"description": "(Required) The ID of the user"
										}
									]
								},
								"description": "Returns data about a specific user within the company."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "User with specified ID does not exist or is inaccessible",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"User not found or not accessible.\"\n}"
								}
							]
						},
						{
							"name": "Wrong request method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//converting the response to json format\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//validating status code\r",
											"pm.test(\"Wrong request method\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(405); // Expecting a client error response\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//validating response body datatype\r",
											"pm.test(\"response body is in aliance with data structure\", function() {\r",
											"    pm.expect(jsonData.status).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"//validating error message\r",
											"pm.test(\"Error message is well spelt out\", function() {\r",
											" pm.expect(jsonData.error).to.include(\"Unknown method\");\r",
											" \r",
											" });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "0",
											"description": "(Required) The ID of the user"
										}
									]
								},
								"description": "Returns data about a specific user within the company."
							},
							"response": [
								{
									"name": "The data of the user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Jane Doe\",\n    \"default_currency\": \"EUR\",\n    \"locale\": \"et_EE\",\n    \"lang\": 1,\n    \"email\": \"jane@pipedrive.com\",\n    \"phone\": \"0000-0002\",\n    \"activated\": true,\n    \"last_login\": \"2019-09-11 11:43:54\",\n    \"created\": \"2019-01-22 10:43:47\",\n    \"modified\": \"2019-11-21 09:49:50\",\n    \"has_created_company\": false,\n    \"access\": [\n      {\n        \"app\": \"sales\",\n        \"admin\": false,\n        \"permission_set_id\": \"f07d229d-088a-4144-a40f-1fe64295d180\"\n      },\n      {\n        \"app\": \"global\",\n        \"admin\": true,\n        \"permission_set_id\": \"233b7976-39bd-43a9-b305-ef3a2b0998e5\"\n      }\n    ],\n    \"active_flag\": true,\n    \"timezone_name\": \"Europe/Berlin\",\n    \"timezone_offset\": \"+03:00\",\n    \"role_id\": 1,\n    \"icon_url\": null,\n    \"is_you\": false,\n    \"is_deleted\": false\n  }\n}"
								},
								{
									"name": "User with specified ID does not exist or is inaccessible",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"User not found or not accessible.\"\n}"
								}
							]
						}
					]
				}
			],
			"description": "Users are people with access to your Pipedrive account. A user may belong to one or many Pipedrive accounts, so deleting a user from one Pipedrive account will not remove the user from the data store if he/she is connected to multiple accounts. Users should not be confused with persons.\n"
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Add an organization",
					"item": [
						{
							"name": "Add an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();  // ISO format: \"YYYY-MM-DDTHH:mm:ss.sssZ\"\r",
											"\r",
											"// Set the current time in the environment variable\r",
											"pm.environment.set(\"add_time\", currentTime);\r",
											"\r",
											"\r",
											"pm.environment.set(\"update_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"pm.environment.set(\"organization_id_1\", jsonData.data.id);\r",
											"\r",
											"pm.environment.get(\"organization_id_1\");\r",
											"\r",
											"pm.environment.set(\"organisation_name_1\",\r",
											"jsonData.data.name);\r",
											"\r",
											"pm.environment.get(\"organisation_name_1\");\r",
											"\r",
											"pm.environment.set(\"Company_id\",\r",
											"jsonData.data.name);\r",
											"\r",
											"pm.environment.get(\"Company_id\");\r",
											"\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
											"\r",
											"    pm.expect(jsonData.data.id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.id)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data.company_id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.company_id)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data.owner_id).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.data.owner_id.id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.owner_id.id)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data.owner_id.name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.owner_id.email).to.be.a(\"string\");\r",
											"    \r",
											"    pm.expect(jsonData.data.owner_id.has_pic).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.owner_id.has_pic)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data.owner_id.pic_hash).to.be.null;\r",
											"    pm.expect(jsonData.data.owner_id.active_flag).to.be.a(\"boolean\");\r",
											"    \r",
											"    pm.expect(jsonData.data.owner_id.value).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.owner_id.value)).to.be.true;\r",
											"\r",
											"    pm.expect(jsonData.data.name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.open_deals_count).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.data.related_open_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.closed_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.related_closed_deals_count).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.data.email_messages_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.people_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.activities_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.done_activities_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.undone_activities_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.files_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.notes_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.followers_count).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.data.won_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.related_won_deals_count).to.be.a(\"number\");\r",
											"    \r",
											"    pm.expect(jsonData.data.active_flag).to.be.true;\r",
											"    pm.expect(jsonData.data.picture_id).to.be.null;\r",
											"    pm.expect(jsonData.data.country_code).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.first_char).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.data.delete_time).to.be.null;\r",
											"    \r",
											"    pm.expect(jsonData.data.visible_to).to.be.a(\"string\"); \r",
											"    \r",
											"\r",
											"\r",
											"    pm.expect(jsonData.data.next_activity_date).to.be.null;\r",
											"    pm.expect(jsonData.data.next_activity_time).to.be.null;\r",
											"    pm.expect(jsonData.data.next_activity_id).to.be.null;\r",
											"    pm.expect(jsonData.data.last_activity_id).to.be.null;\r",
											"    pm.expect(jsonData.data.last_activity_date).to.be.null;\r",
											"    pm.expect(jsonData.data.label).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.label_ids).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.address).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.cc_email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.owner_name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.edit_name).to.be.a(\"boolean\");\r",
											"\r",
											"    pm.expect(jsonData.additional_data).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.additional_data.didMerge).to.be.a(\"boolean\");\r",
											"\r",
											"    pm.expect(jsonData.related_objects).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.related_objects.user).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"//content_type header is present\r",
											"pm.test(\"Content-Type is not missing\", function() {\r",
											"    let contentType = pm.response.headers.get(\"Content-Type\"); // Get the actual header value\r",
											"    pm.expect(contentType, \"Content-Type header is missing\").to.not.be.undefined;\r",
											"});\r",
											"\r",
											"\r",
											"    let timestamp = new Date(jsonData.data.update_time);\r",
											"    pm.test(\"Validate update_time timestamp\", function () {\r",
											"        pm.expect(timestamp.getTime()).to.be.a(\"number\").that.is.not.NaN;\r",
											"    });\r",
											"\r",
											"    let timestamp1 = new Date(jsonData.data?.add_time);\r",
											"    pm.test(\"Validate add_time timestamp\", function () {\r",
											"        pm.expect(timestamp1.getTime()).to.be.a(\"number\").that.is.not.NaN;\r",
											"    });\r",
											"\r",
											"\r",
											"// Extract first user details from related_objects\r",
											"let userKeys = Object.keys(jsonData.related_objects.user || {});\r",
											"if (userKeys.length > 0) {\r",
											"    let firstUser = jsonData.related_objects.user[userKeys[0]];\r",
											"\r",
											"    pm.test(\"Validate user ID is a number\", function () {\r",
											"        pm.expect(firstUser.id).to.be.a(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validate user name is a string\", function () {\r",
											"        pm.expect(firstUser.name).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validate user email is a string\", function () {\r",
											"        pm.expect(firstUser.email).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validate user has_pic is a number\", function () {\r",
											"        pm.expect(firstUser.has_pic).to.be.a(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validate user pic_hash is null\", function () {\r",
											"        pm.expect(firstUser.pic_hash).to.be.null;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Validate user active_flag is a boolean\", function () {\r",
											"        pm.expect(firstUser.active_flag).to.be.a(\"boolean\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Validate response status code\r",
											"pm.test(\"Resource created successfully\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"// Validate response time\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{$randomCompanyName}}\",\n  \"add_time\": \"{{add_time}}\",\n  \"owner_id\": {{user_id}},//user linked to this company,\n  \"label_ids\": [],\n  \"visible_to\":\"3\"\n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations"
									]
								},
								"description": "Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"add_time\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizations?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 77,\n    \"owner_id\": {\n      \"id\": 10,\n      \"name\": \"Will Smith\",\n      \"email\": \"will.smith@pipedrive.com\",\n      \"has_pic\": 0,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 10\n    },\n    \"name\": \"Bolt\",\n    \"open_deals_count\": 1,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 1,\n    \"email_messages_count\": 2,\n    \"people_count\": 1,\n    \"activities_count\": 2,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 0,\n    \"files_count\": 0,\n    \"notes_count\": 0,\n    \"followers_count\": 1,\n    \"won_deals_count\": 0,\n    \"related_won_deals_count\": 0,\n    \"lost_deals_count\": 0,\n    \"related_lost_deals_count\": 0,\n    \"active_flag\": true,\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cf14ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb2ac8f269_512.jpg\"\n      },\n      \"value\": 101\n    },\n    \"country_code\": null,\n    \"first_char\": \"b\",\n    \"update_time\": \"2020-09-08 12:14:11\",\n    \"add_time\": \"2020-02-25 10:04:08\",\n    \"visible_to\": \"3\",\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"label\": 7,\n    \"label_ids\": [\n      7,\n      8\n    ],\n    \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n    \"address_subpremise\": \"\",\n    \"address_street_number\": \"3a\",\n    \"address_route\": \"Mustamäe tee\",\n    \"address_sublocality\": \"Kristiine\",\n    \"address_locality\": \"Tallinn\",\n    \"address_admin_area_level_1\": \"Harju maakond\",\n    \"address_admin_area_level_2\": \"\",\n    \"address_country\": \"Estonia\",\n    \"address_postal_code\": \"10616\",\n    \"address_formatted_address\": \"Mustamäe tee 3a, 10616 Tallinn, Estonia\",\n    \"owner_name\": \"John Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add an organization - invalid request(missing organization name)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();  // ISO format: \"YYYY-MM-DDTHH:mm:ss.sssZ\"\r",
											"\r",
											"// Set the current time in the environment variable\r",
											"pm.environment.set(\"add_time\", currentTime);\r",
											"\r",
											"\r",
											"pm.environment.set(\"update_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"Organization name must be given.\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n  \"add_time\": \"{{add_time}}\",\n  \"owner_id\": {{user_id}},//user linked to this company,\n  \"label_ids\": [],\n  \"visible_to\":\"1\"\n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations"
									]
								},
								"description": "Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"add_time\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizations?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 77,\n    \"owner_id\": {\n      \"id\": 10,\n      \"name\": \"Will Smith\",\n      \"email\": \"will.smith@pipedrive.com\",\n      \"has_pic\": 0,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 10\n    },\n    \"name\": \"Bolt\",\n    \"open_deals_count\": 1,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 1,\n    \"email_messages_count\": 2,\n    \"people_count\": 1,\n    \"activities_count\": 2,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 0,\n    \"files_count\": 0,\n    \"notes_count\": 0,\n    \"followers_count\": 1,\n    \"won_deals_count\": 0,\n    \"related_won_deals_count\": 0,\n    \"lost_deals_count\": 0,\n    \"related_lost_deals_count\": 0,\n    \"active_flag\": true,\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cf14ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb2ac8f269_512.jpg\"\n      },\n      \"value\": 101\n    },\n    \"country_code\": null,\n    \"first_char\": \"b\",\n    \"update_time\": \"2020-09-08 12:14:11\",\n    \"add_time\": \"2020-02-25 10:04:08\",\n    \"visible_to\": \"3\",\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"label\": 7,\n    \"label_ids\": [\n      7,\n      8\n    ],\n    \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n    \"address_subpremise\": \"\",\n    \"address_street_number\": \"3a\",\n    \"address_route\": \"Mustamäe tee\",\n    \"address_sublocality\": \"Kristiine\",\n    \"address_locality\": \"Tallinn\",\n    \"address_admin_area_level_1\": \"Harju maakond\",\n    \"address_admin_area_level_2\": \"\",\n    \"address_country\": \"Estonia\",\n    \"address_postal_code\": \"10616\",\n    \"address_formatted_address\": \"Mustamäe tee 3a, 10616 Tallinn, Estonia\",\n    \"owner_name\": \"John Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add an organization - unauthorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();  // ISO format: \"YYYY-MM-DDTHH:mm:ss.sssZ\"\r",
											"\r",
											"// Set the current time in the environment variable\r",
											"pm.environment.set(\"add_time\", currentTime);\r",
											"\r",
											"\r",
											"pm.environment.set(\"update_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"//validating response body\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n  \"add_time\": \"{{add_time}}\",\n  \"owner_id\": {{user_id}},//user linked to this company,\n  \"label_ids\": [],\n  \"visible_to\":\"1\"\n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations"
									]
								},
								"description": "Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"add_time\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizations?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 77,\n    \"owner_id\": {\n      \"id\": 10,\n      \"name\": \"Will Smith\",\n      \"email\": \"will.smith@pipedrive.com\",\n      \"has_pic\": 0,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 10\n    },\n    \"name\": \"Bolt\",\n    \"open_deals_count\": 1,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 1,\n    \"email_messages_count\": 2,\n    \"people_count\": 1,\n    \"activities_count\": 2,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 0,\n    \"files_count\": 0,\n    \"notes_count\": 0,\n    \"followers_count\": 1,\n    \"won_deals_count\": 0,\n    \"related_won_deals_count\": 0,\n    \"lost_deals_count\": 0,\n    \"related_lost_deals_count\": 0,\n    \"active_flag\": true,\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cf14ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb2ac8f269_512.jpg\"\n      },\n      \"value\": 101\n    },\n    \"country_code\": null,\n    \"first_char\": \"b\",\n    \"update_time\": \"2020-09-08 12:14:11\",\n    \"add_time\": \"2020-02-25 10:04:08\",\n    \"visible_to\": \"3\",\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"label\": 7,\n    \"label_ids\": [\n      7,\n      8\n    ],\n    \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n    \"address_subpremise\": \"\",\n    \"address_street_number\": \"3a\",\n    \"address_route\": \"Mustamäe tee\",\n    \"address_sublocality\": \"Kristiine\",\n    \"address_locality\": \"Tallinn\",\n    \"address_admin_area_level_1\": \"Harju maakond\",\n    \"address_admin_area_level_2\": \"\",\n    \"address_country\": \"Estonia\",\n    \"address_postal_code\": \"10616\",\n    \"address_formatted_address\": \"Mustamäe tee 3a, 10616 Tallinn, Estonia\",\n    \"owner_name\": \"John Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add an organization - invalid request(missing organization name field)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();  // ISO format: \"YYYY-MM-DDTHH:mm:ss.sssZ\"\r",
											"\r",
											"// Set the current time in the environment variable\r",
											"pm.environment.set(\"add_time\", currentTime);\r",
											"\r",
											"\r",
											"pm.environment.set(\"update_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"Organization name must be given.\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"add_time\": \"{{add_time}}\",\n  \"owner_id\": {{user_id}},//user linked to this company,\n  \"label_ids\": [],\n  \"visible_to\":\"1\"\n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations"
									]
								},
								"description": "Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"add_time\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizations?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 77,\n    \"owner_id\": {\n      \"id\": 10,\n      \"name\": \"Will Smith\",\n      \"email\": \"will.smith@pipedrive.com\",\n      \"has_pic\": 0,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 10\n    },\n    \"name\": \"Bolt\",\n    \"open_deals_count\": 1,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 1,\n    \"email_messages_count\": 2,\n    \"people_count\": 1,\n    \"activities_count\": 2,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 0,\n    \"files_count\": 0,\n    \"notes_count\": 0,\n    \"followers_count\": 1,\n    \"won_deals_count\": 0,\n    \"related_won_deals_count\": 0,\n    \"lost_deals_count\": 0,\n    \"related_lost_deals_count\": 0,\n    \"active_flag\": true,\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cf14ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb2ac8f269_512.jpg\"\n      },\n      \"value\": 101\n    },\n    \"country_code\": null,\n    \"first_char\": \"b\",\n    \"update_time\": \"2020-09-08 12:14:11\",\n    \"add_time\": \"2020-02-25 10:04:08\",\n    \"visible_to\": \"3\",\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"label\": 7,\n    \"label_ids\": [\n      7,\n      8\n    ],\n    \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n    \"address_subpremise\": \"\",\n    \"address_street_number\": \"3a\",\n    \"address_route\": \"Mustamäe tee\",\n    \"address_sublocality\": \"Kristiine\",\n    \"address_locality\": \"Tallinn\",\n    \"address_admin_area_level_1\": \"Harju maakond\",\n    \"address_admin_area_level_2\": \"\",\n    \"address_country\": \"Estonia\",\n    \"address_postal_code\": \"10616\",\n    \"address_formatted_address\": \"Mustamäe tee 3a, 10616 Tallinn, Estonia\",\n    \"owner_name\": \"John Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add an organization - invalid request(wrong datatype organization name)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();  // ISO format: \"YYYY-MM-DDTHH:mm:ss.sssZ\"\r",
											"\r",
											"// Set the current time in the environment variable\r",
											"pm.environment.set(\"add_time\", currentTime);\r",
											"\r",
											"\r",
											"pm.environment.set(\"update_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"Name must be a string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": 1,\n  \"add_time\": \"{{add_time}}\",\n  \"owner_id\": {{user_id}},//user linked to this company,\n  \"label_ids\": [],\n  \"visible_to\":\"1\"\n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations"
									]
								},
								"description": "Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"add_time\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizations?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 77,\n    \"owner_id\": {\n      \"id\": 10,\n      \"name\": \"Will Smith\",\n      \"email\": \"will.smith@pipedrive.com\",\n      \"has_pic\": 0,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 10\n    },\n    \"name\": \"Bolt\",\n    \"open_deals_count\": 1,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 1,\n    \"email_messages_count\": 2,\n    \"people_count\": 1,\n    \"activities_count\": 2,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 0,\n    \"files_count\": 0,\n    \"notes_count\": 0,\n    \"followers_count\": 1,\n    \"won_deals_count\": 0,\n    \"related_won_deals_count\": 0,\n    \"lost_deals_count\": 0,\n    \"related_lost_deals_count\": 0,\n    \"active_flag\": true,\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cf14ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb2ac8f269_512.jpg\"\n      },\n      \"value\": 101\n    },\n    \"country_code\": null,\n    \"first_char\": \"b\",\n    \"update_time\": \"2020-09-08 12:14:11\",\n    \"add_time\": \"2020-02-25 10:04:08\",\n    \"visible_to\": \"3\",\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"label\": 7,\n    \"label_ids\": [\n      7,\n      8\n    ],\n    \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n    \"address_subpremise\": \"\",\n    \"address_street_number\": \"3a\",\n    \"address_route\": \"Mustamäe tee\",\n    \"address_sublocality\": \"Kristiine\",\n    \"address_locality\": \"Tallinn\",\n    \"address_admin_area_level_1\": \"Harju maakond\",\n    \"address_admin_area_level_2\": \"\",\n    \"address_country\": \"Estonia\",\n    \"address_postal_code\": \"10616\",\n    \"address_formatted_address\": \"Mustamäe tee 3a, 10616 Tallinn, Estonia\",\n    \"owner_name\": \"John Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add an organization - not existing user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();  // ISO format: \"YYYY-MM-DDTHH:mm:ss.sssZ\"\r",
											"\r",
											"// Set the current time in the environment variable\r",
											"pm.environment.set(\"add_time\", currentTime);\r",
											"\r",
											"\r",
											"pm.environment.set(\"update_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"invalid owner_id\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400,422]);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Organization ID should not be present\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.not.have.property(\"id\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{$randomCompanyName}}\",\n  \"add_time\": \"{{add_time}}\",\n  \"owner_id\": 2315815800000000000000000,//user linked to this company,\n  \"label_ids\": [],\n  \"visible_to\":\"1\"\n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations"
									]
								},
								"description": "Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"add_time\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizations?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 77,\n    \"owner_id\": {\n      \"id\": 10,\n      \"name\": \"Will Smith\",\n      \"email\": \"will.smith@pipedrive.com\",\n      \"has_pic\": 0,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 10\n    },\n    \"name\": \"Bolt\",\n    \"open_deals_count\": 1,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 1,\n    \"email_messages_count\": 2,\n    \"people_count\": 1,\n    \"activities_count\": 2,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 0,\n    \"files_count\": 0,\n    \"notes_count\": 0,\n    \"followers_count\": 1,\n    \"won_deals_count\": 0,\n    \"related_won_deals_count\": 0,\n    \"lost_deals_count\": 0,\n    \"related_lost_deals_count\": 0,\n    \"active_flag\": true,\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cf14ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb2ac8f269_512.jpg\"\n      },\n      \"value\": 101\n    },\n    \"country_code\": null,\n    \"first_char\": \"b\",\n    \"update_time\": \"2020-09-08 12:14:11\",\n    \"add_time\": \"2020-02-25 10:04:08\",\n    \"visible_to\": \"3\",\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"label\": 7,\n    \"label_ids\": [\n      7,\n      8\n    ],\n    \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n    \"address_subpremise\": \"\",\n    \"address_street_number\": \"3a\",\n    \"address_route\": \"Mustamäe tee\",\n    \"address_sublocality\": \"Kristiine\",\n    \"address_locality\": \"Tallinn\",\n    \"address_admin_area_level_1\": \"Harju maakond\",\n    \"address_admin_area_level_2\": \"\",\n    \"address_country\": \"Estonia\",\n    \"address_postal_code\": \"10616\",\n    \"address_formatted_address\": \"Mustamäe tee 3a, 10616 Tallinn, Estonia\",\n    \"owner_name\": \"John Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add an organization - inactive user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();  // ISO format: \"YYYY-MM-DDTHH:mm:ss.sssZ\"\r",
											"\r",
											"// Set the current time in the environment variable\r",
											"pm.environment.set(\"add_time\", currentTime);\r",
											"\r",
											"\r",
											"pm.environment.set(\"update_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"Forbidden to take this action.\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Organization ID should not be present\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.not.have.property(\"id\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{$randomCompanyName}}\",\n  \"add_time\": \"{{add_time}}\",\n  \"owner_id\": {{Inactive_user}},//user linked to this company,\n  \"label_ids\": [],\n  \"visible_to\":\"1\"\n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations"
									]
								},
								"description": "Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"add_time\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizations?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 77,\n    \"owner_id\": {\n      \"id\": 10,\n      \"name\": \"Will Smith\",\n      \"email\": \"will.smith@pipedrive.com\",\n      \"has_pic\": 0,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 10\n    },\n    \"name\": \"Bolt\",\n    \"open_deals_count\": 1,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 1,\n    \"email_messages_count\": 2,\n    \"people_count\": 1,\n    \"activities_count\": 2,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 0,\n    \"files_count\": 0,\n    \"notes_count\": 0,\n    \"followers_count\": 1,\n    \"won_deals_count\": 0,\n    \"related_won_deals_count\": 0,\n    \"lost_deals_count\": 0,\n    \"related_lost_deals_count\": 0,\n    \"active_flag\": true,\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cf14ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb2ac8f269_512.jpg\"\n      },\n      \"value\": 101\n    },\n    \"country_code\": null,\n    \"first_char\": \"b\",\n    \"update_time\": \"2020-09-08 12:14:11\",\n    \"add_time\": \"2020-02-25 10:04:08\",\n    \"visible_to\": \"3\",\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"label\": 7,\n    \"label_ids\": [\n      7,\n      8\n    ],\n    \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n    \"address_subpremise\": \"\",\n    \"address_street_number\": \"3a\",\n    \"address_route\": \"Mustamäe tee\",\n    \"address_sublocality\": \"Kristiine\",\n    \"address_locality\": \"Tallinn\",\n    \"address_admin_area_level_1\": \"Harju maakond\",\n    \"address_admin_area_level_2\": \"\",\n    \"address_country\": \"Estonia\",\n    \"address_postal_code\": \"10616\",\n    \"address_formatted_address\": \"Mustamäe tee 3a, 10616 Tallinn, Estonia\",\n    \"owner_name\": \"John Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						}
					],
					"description": "This is a folder that encompasses the crud operations on organization"
				},
				{
					"name": "Get all organization",
					"item": [
						{
							"name": "Get all organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].id)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data[0].company_id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].company_id)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data[0].owner_id).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.data[0].owner_id.id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].owner_id.id)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data[0].owner_id.name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].owner_id.email).to.be.a(\"string\");\r",
											"    \r",
											"    pm.expect(jsonData.data[0].owner_id.has_pic).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].owner_id.has_pic)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data[0].owner_id.pic_hash).to.be.null;\r",
											"    pm.expect(jsonData.data[0].owner_id.active_flag).to.be.a(\"boolean\");\r",
											"    \r",
											"    pm.expect(jsonData.data[0].owner_id.value).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].owner_id.value)).to.be.true;\r",
											"\r",
											"    pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].open_deals_count).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.data[0].related_open_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].closed_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].related_closed_deals_count).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.data[0].email_messages_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].people_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].activities_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].done_activities_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].undone_activities_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].files_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].notes_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].followers_count).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.data[0].won_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].related_won_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].lost_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].related_lost_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].active_flag).to.be.true;\r",
											"    pm.expect(jsonData.data[0].picture_id).to.be.null;\r",
											"    pm.expect(jsonData.data[0].country_code).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data[0].first_char).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.data[0].delete_time).to.be.null;\r",
											"    \r",
											"    pm.expect(jsonData.data[0].visible_to).to.be.a(\"string\"); \r",
											"    \r",
											"\r",
											"\r",
											"    pm.expect(jsonData.data[0].next_activity_date).to.be.null;\r",
											"    pm.expect(jsonData.data[0].next_activity_time).to.be.null;\r",
											"    pm.expect(jsonData.data[0].next_activity_id).to.be.null;\r",
											"    pm.expect(jsonData.data[0].last_activity_id).to.be.null;\r",
											"    pm.expect(jsonData.data[0].last_activity_date).to.be.null;\r",
											"    pm.expect(jsonData.data[0].label).to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data[0].label_ids).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data[0].address).to.be.null;\r",
											"    pm.expect(jsonData.data[0].address_subpremise).to.be.null;\r",
											"    pm.expect(jsonData.data[0].address_street_number).to.be.null;\r",
											"    pm.expect(jsonData.data[0].address_route).to.be.null;\r",
											"    pm.expect(jsonData.data[0].address_sublocality).to.be.null;\r",
											"    pm.expect(jsonData.data[0].address_locality).to.be.null;\r",
											"    pm.expect(jsonData.data[0].address_admin_area_level_1).to.be.null;\r",
											"    pm.expect(jsonData.data[0].address_admin_area_level_2).to.be.null;\r",
											"     pm.expect(jsonData.data[0].address_country).to.be.null;\r",
											"       pm.expect(jsonData.data[0].address_postal_code).to.be.null;\r",
											"         pm.expect(jsonData.data[0].address_formatted_address).to.be.null;\r",
											"           pm.expect(jsonData.data[0].website).to.be.null;\r",
											"             pm.expect(jsonData.data[0].linkedin).to.be.null;\r",
											"             pm.expect(jsonData.data[0].industry).to.be.null;\r",
											"             pm.expect(jsonData.data[0].annual_revenue).to.be.null;\r",
											"             pm.expect(jsonData.data[0].employee_count).to.be.null;\r",
											"             pm.expect(jsonData.data[0].owner_name).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"\r",
											"    pm.expect(jsonData.data[0].cc_email).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.additional_data).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.additional_data.pagination).to.be.a(\"object\");\r",
											"      pm.expect(jsonData.additional_data.pagination.start).to.be.a(\"number\");\r",
											"      pm.expect(Number.isInteger(jsonData.additional_data.pagination.start)).to.be.true;\r",
											"\r",
											"       pm.expect(jsonData.additional_data.pagination.limit).to.be.a(\"number\");\r",
											"      pm.expect(Number.isInteger(jsonData.additional_data.pagination.limit)).to.be.true;\r",
											"\r",
											"      pm.expect(jsonData.additional_data.pagination.more_items_in_collection).to.be.a(\"boolean\");\r",
											"\r",
											"    pm.expect(jsonData.related_objects).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.related_objects.user).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"let userKeys = Object.keys(jsonData\r",
											".related_objects.user)\r",
											"\r",
											"//retrieving dynamic values\r",
											"let userValues = Object.values(jsonData.related_objects\r",
											".user[userKeys[0]])\r",
											"\r",
											"pm.test(\"dynamic structure is correct\", function() {\r",
											"      pm.expect(jsonData.related_objects.user[userKeys[0]].id).to.be.a(\"number\");\r",
											"      pm.expect(Number.isInteger(jsonData.related_objects.user[userKeys[0]].id)).to.be.true;\r",
											"    \r",
											"      pm.expect(jsonData.related_objects.user[userKeys[0]].email).to.be.a(\"string\");\r",
											"      pm.expect(jsonData.related_objects.user[userKeys[0]].has_pic).to.be.a(\"number\");\r",
											"      pm.expect(Number.isInteger(jsonData.related_objects.user[userKeys[0]].has_pic)).to.be.true;\r",
											"      pm.expect(jsonData.related_objects.user[userKeys[0]].pic_hash).to.be.null;\r",
											"      pm.expect(jsonData.related_objects.user[userKeys[0]].active_flag).to.be.true;\r",
											"\r",
											"      \r",
											"     ;\r",
											"\r",
											"    \r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// Validate response status code\r",
											"pm.test(\"Resource created successfully\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations?user_id={{user_id}}&start=0&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"description": "If supplied, only organizations owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied."
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "first_char",
											"value": "<string>",
											"description": "If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)",
											"disabled": true
										},
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Items shown per page"
										},
										{
											"key": "sort",
											"value": "or",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).",
											"disabled": true
										}
									]
								},
								"description": "Returns all organizations."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizations?user_id=<integer>&filter_id=<integer>&first_char=<string>&start=0&limit=<integer>&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations"
											],
											"query": [
												{
													"key": "user_id",
													"value": "<integer>"
												},
												{
													"key": "filter_id",
													"value": "<integer>"
												},
												{
													"key": "first_char",
													"value": "<string>"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"company_id\": 77,\n      \"owner_id\": {\n        \"id\": 10,\n        \"name\": \"Will Smith\",\n        \"email\": \"will.smith@pipedrive.com\",\n        \"has_pic\": 0,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true,\n        \"value\": 10\n      },\n      \"name\": \"Bolt\",\n      \"open_deals_count\": 1,\n      \"related_open_deals_count\": 2,\n      \"closed_deals_count\": 3,\n      \"related_closed_deals_count\": 1,\n      \"email_messages_count\": 2,\n      \"people_count\": 1,\n      \"activities_count\": 2,\n      \"done_activities_count\": 1,\n      \"undone_activities_count\": 0,\n      \"files_count\": 0,\n      \"notes_count\": 0,\n      \"followers_count\": 1,\n      \"won_deals_count\": 0,\n      \"related_won_deals_count\": 0,\n      \"lost_deals_count\": 0,\n      \"related_lost_deals_count\": 0,\n      \"active_flag\": true,\n      \"picture_id\": {\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cf14ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb2ac8f269_512.jpg\"\n        },\n        \"value\": 101\n      },\n      \"country_code\": null,\n      \"first_char\": \"b\",\n      \"update_time\": \"2020-09-08 12:14:11\",\n      \"add_time\": \"2020-02-25 10:04:08\",\n      \"visible_to\": \"3\",\n      \"next_activity_date\": \"2019-11-29\",\n      \"next_activity_time\": \"11:30:00\",\n      \"next_activity_id\": 128,\n      \"last_activity_id\": 34,\n      \"last_activity_date\": \"2019-11-28\",\n      \"label\": 7,\n      \"label_ids\": [\n        7,\n        8\n      ],\n      \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n      \"address_subpremise\": \"\",\n      \"address_street_number\": \"3a\",\n      \"address_route\": \"Mustamäe tee\",\n      \"address_sublocality\": \"Kristiine\",\n      \"address_locality\": \"Tallinn\",\n      \"address_admin_area_level_1\": \"Harju maakond\",\n      \"address_admin_area_level_2\": \"\",\n      \"address_country\": \"Estonia\",\n      \"address_postal_code\": \"10616\",\n      \"address_formatted_address\": \"Mustamäe tee 3a, 10616 Tallinn, Estonia\",\n      \"owner_name\": \"John Doe\",\n      \"cc_email\": \"org@pipedrivemail.com\"\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false,\n      \"next_start\": 100\n    }\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Get all organizations - unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"//validating response body\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations?user_id={{user_id}}&start=0&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"description": "If supplied, only organizations owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied."
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "first_char",
											"value": "<string>",
											"description": "If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)",
											"disabled": true
										},
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Items shown per page"
										},
										{
											"key": "sort",
											"value": "or",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).",
											"disabled": true
										}
									]
								},
								"description": "Returns all organizations."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizations?user_id=<integer>&filter_id=<integer>&first_char=<string>&start=0&limit=<integer>&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations"
											],
											"query": [
												{
													"key": "user_id",
													"value": "<integer>"
												},
												{
													"key": "filter_id",
													"value": "<integer>"
												},
												{
													"key": "first_char",
													"value": "<string>"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"company_id\": 77,\n      \"owner_id\": {\n        \"id\": 10,\n        \"name\": \"Will Smith\",\n        \"email\": \"will.smith@pipedrive.com\",\n        \"has_pic\": 0,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true,\n        \"value\": 10\n      },\n      \"name\": \"Bolt\",\n      \"open_deals_count\": 1,\n      \"related_open_deals_count\": 2,\n      \"closed_deals_count\": 3,\n      \"related_closed_deals_count\": 1,\n      \"email_messages_count\": 2,\n      \"people_count\": 1,\n      \"activities_count\": 2,\n      \"done_activities_count\": 1,\n      \"undone_activities_count\": 0,\n      \"files_count\": 0,\n      \"notes_count\": 0,\n      \"followers_count\": 1,\n      \"won_deals_count\": 0,\n      \"related_won_deals_count\": 0,\n      \"lost_deals_count\": 0,\n      \"related_lost_deals_count\": 0,\n      \"active_flag\": true,\n      \"picture_id\": {\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cf14ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb2ac8f269_512.jpg\"\n        },\n        \"value\": 101\n      },\n      \"country_code\": null,\n      \"first_char\": \"b\",\n      \"update_time\": \"2020-09-08 12:14:11\",\n      \"add_time\": \"2020-02-25 10:04:08\",\n      \"visible_to\": \"3\",\n      \"next_activity_date\": \"2019-11-29\",\n      \"next_activity_time\": \"11:30:00\",\n      \"next_activity_id\": 128,\n      \"last_activity_id\": 34,\n      \"last_activity_date\": \"2019-11-28\",\n      \"label\": 7,\n      \"label_ids\": [\n        7,\n        8\n      ],\n      \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n      \"address_subpremise\": \"\",\n      \"address_street_number\": \"3a\",\n      \"address_route\": \"Mustamäe tee\",\n      \"address_sublocality\": \"Kristiine\",\n      \"address_locality\": \"Tallinn\",\n      \"address_admin_area_level_1\": \"Harju maakond\",\n      \"address_admin_area_level_2\": \"\",\n      \"address_country\": \"Estonia\",\n      \"address_postal_code\": \"10616\",\n      \"address_formatted_address\": \"Mustamäe tee 3a, 10616 Tallinn, Estonia\",\n      \"owner_name\": \"John Doe\",\n      \"cc_email\": \"org@pipedrivemail.com\"\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false,\n      \"next_start\": 100\n    }\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Persons",
			"item": [
				{
					"name": "Add person",
					"item": [
						{
							"name": "Add a person",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();\r",
											"pm.environment.set(\"add_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" pm.environment.set(\"person_id_1\",jsonData.data.id);\r",
											" pm.environment.get(\"person_id_1\")\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											" pm.environment.set(\"person_id_1_name\",jsonData.data.id);\r",
											" pm.environment.get(\"person_id_1_name\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Foxy brown souvenirs\",\n  \"owner_id\": {{UserID_1}},\n  \"org_id\": {{organization_id_1}},\n  \"email\": [\n    {\n      \"value\": \"foxybrown@gmail.com\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"0802345858\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"07012345676\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"label\": \"\",\n  \"label_ids\": [],\n  \"visible_to\": \"3\",\n  \"marketing_status\": \"\",\n  \"add_time\": \"{{add_time}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/persons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									]
								},
								"description": "Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"org_id\": \"<integer>\",\n  \"email\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\",\n  \"marketing_status\": \"<string>\",\n  \"add_time\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/persons?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 12,\n    \"owner_id\": {\n      \"id\": 123,\n      \"name\": \"Jane Doe\",\n      \"email\": \"jane@pipedrive.com\",\n      \"has_pic\": 1,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 123\n    },\n    \"org_id\": {\n      \"name\": \"Org Name\",\n      \"people_count\": 1,\n      \"owner_id\": 123,\n      \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n      \"active_flag\": true,\n      \"cc_email\": \"org@pipedrivemail.com\",\n      \"value\": 1234\n    },\n    \"name\": \"Will Smith\",\n    \"first_name\": \"Will\",\n    \"last_name\": \"Smith\",\n    \"open_deals_count\": 2,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 3,\n    \"participant_open_deals_count\": 1,\n    \"participant_closed_deals_count\": 1,\n    \"email_messages_count\": 1,\n    \"activities_count\": 1,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 2,\n    \"files_count\": 2,\n    \"notes_count\": 2,\n    \"followers_count\": 3,\n    \"won_deals_count\": 3,\n    \"related_won_deals_count\": 3,\n    \"lost_deals_count\": 1,\n    \"related_lost_deals_count\": 1,\n    \"active_flag\": true,\n    \"phone\": [\n      {\n        \"value\": \"12345\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"email\": [\n      {\n        \"value\": \"12345@email.com\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"primary_email\": \"12345@email.com\",\n    \"first_char\": \"w\",\n    \"update_time\": \"2020-05-08 05:30:20\",\n    \"add_time\": \"2017-10-18 13:23:07\",\n    \"visible_to\": \"3\",\n    \"marketing_status\": \"no_consent\",\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n      },\n      \"value\": 4\n    },\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n    \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n    \"label\": 1,\n    \"label_ids\": [\n      1,\n      2,\n      3\n    ],\n    \"org_name\": \"Organization name\",\n    \"owner_name\": \"Jane Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add a person - inactive user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();\r",
											"pm.environment.set(\"add_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" pm.environment.set(\"person_id_1\",jsonData.data.id);\r",
											" pm.environment.get(\"person_id_1\")\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											" pm.environment.set(\"person_id_1_name\",jsonData.data.id);\r",
											" pm.environment.get(\"person_id_1_name\");\r",
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"Forbidden to take this action.\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Person ID should not be present\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.not.have.property(\"id\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Foxy brown souvenirs\",\n  \"owner_id\": {{Inactive_user}},\n  \"org_id\": {{organization_id_1}},\n  \"email\": [\n    {\n      \"value\": \"foxybrown@gmail.com\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"0802345858\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"07012345676\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"label\": \"\",\n  \"label_ids\": [],\n  \"visible_to\": \"3\",\n  \"marketing_status\": \"\",\n  \"add_time\": \"{{add_time}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/persons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									]
								},
								"description": "Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"org_id\": \"<integer>\",\n  \"email\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\",\n  \"marketing_status\": \"<string>\",\n  \"add_time\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/persons?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 12,\n    \"owner_id\": {\n      \"id\": 123,\n      \"name\": \"Jane Doe\",\n      \"email\": \"jane@pipedrive.com\",\n      \"has_pic\": 1,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 123\n    },\n    \"org_id\": {\n      \"name\": \"Org Name\",\n      \"people_count\": 1,\n      \"owner_id\": 123,\n      \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n      \"active_flag\": true,\n      \"cc_email\": \"org@pipedrivemail.com\",\n      \"value\": 1234\n    },\n    \"name\": \"Will Smith\",\n    \"first_name\": \"Will\",\n    \"last_name\": \"Smith\",\n    \"open_deals_count\": 2,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 3,\n    \"participant_open_deals_count\": 1,\n    \"participant_closed_deals_count\": 1,\n    \"email_messages_count\": 1,\n    \"activities_count\": 1,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 2,\n    \"files_count\": 2,\n    \"notes_count\": 2,\n    \"followers_count\": 3,\n    \"won_deals_count\": 3,\n    \"related_won_deals_count\": 3,\n    \"lost_deals_count\": 1,\n    \"related_lost_deals_count\": 1,\n    \"active_flag\": true,\n    \"phone\": [\n      {\n        \"value\": \"12345\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"email\": [\n      {\n        \"value\": \"12345@email.com\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"primary_email\": \"12345@email.com\",\n    \"first_char\": \"w\",\n    \"update_time\": \"2020-05-08 05:30:20\",\n    \"add_time\": \"2017-10-18 13:23:07\",\n    \"visible_to\": \"3\",\n    \"marketing_status\": \"no_consent\",\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n      },\n      \"value\": 4\n    },\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n    \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n    \"label\": 1,\n    \"label_ids\": [\n      1,\n      2,\n      3\n    ],\n    \"org_name\": \"Organization name\",\n    \"owner_name\": \"Jane Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add a person - datatype enforcement",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();\r",
											"pm.environment.set(\"add_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											" var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"Name must be a string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Foxy brown souvenirs\",\n  \"owner_id\": \"{{UserID_1}}\",\n  \"org_id\": {{organization_id_1}},\n  \"email\": [\n    {\n      \"value\": \"foxybrown@gmail.com\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"0802345858\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"07012345676\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"label\": \"\",\n  \"label_ids\": [],\n  \"visible_to\": \"3\",\n  \"marketing_status\": \"\",\n  \"add_time\": \"{{add_time}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/persons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									]
								},
								"description": "Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"org_id\": \"<integer>\",\n  \"email\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\",\n  \"marketing_status\": \"<string>\",\n  \"add_time\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/persons?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 12,\n    \"owner_id\": {\n      \"id\": 123,\n      \"name\": \"Jane Doe\",\n      \"email\": \"jane@pipedrive.com\",\n      \"has_pic\": 1,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 123\n    },\n    \"org_id\": {\n      \"name\": \"Org Name\",\n      \"people_count\": 1,\n      \"owner_id\": 123,\n      \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n      \"active_flag\": true,\n      \"cc_email\": \"org@pipedrivemail.com\",\n      \"value\": 1234\n    },\n    \"name\": \"Will Smith\",\n    \"first_name\": \"Will\",\n    \"last_name\": \"Smith\",\n    \"open_deals_count\": 2,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 3,\n    \"participant_open_deals_count\": 1,\n    \"participant_closed_deals_count\": 1,\n    \"email_messages_count\": 1,\n    \"activities_count\": 1,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 2,\n    \"files_count\": 2,\n    \"notes_count\": 2,\n    \"followers_count\": 3,\n    \"won_deals_count\": 3,\n    \"related_won_deals_count\": 3,\n    \"lost_deals_count\": 1,\n    \"related_lost_deals_count\": 1,\n    \"active_flag\": true,\n    \"phone\": [\n      {\n        \"value\": \"12345\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"email\": [\n      {\n        \"value\": \"12345@email.com\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"primary_email\": \"12345@email.com\",\n    \"first_char\": \"w\",\n    \"update_time\": \"2020-05-08 05:30:20\",\n    \"add_time\": \"2017-10-18 13:23:07\",\n    \"visible_to\": \"3\",\n    \"marketing_status\": \"no_consent\",\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n      },\n      \"value\": 4\n    },\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n    \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n    \"label\": 1,\n    \"label_ids\": [\n      1,\n      2,\n      3\n    ],\n    \"org_name\": \"Organization name\",\n    \"owner_name\": \"Jane Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add a person - unauthorised_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();\r",
											"pm.environment.set(\"add_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Foxy brown souvenirs\",\n  \"owner_id\": {{UserID_1}},\n  \"org_id\": {{organization_id_1}},\n  \"email\": [\n    {\n      \"value\": \"foxybrown@gmail.com\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"0802345858\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"07012345676\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"label\": \"\",\n  \"label_ids\": [],\n  \"visible_to\": \"3\",\n  \"marketing_status\": \"\",\n  \"add_time\": \"{{add_time}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/persons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									]
								},
								"description": "Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"org_id\": \"<integer>\",\n  \"email\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\",\n  \"marketing_status\": \"<string>\",\n  \"add_time\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/persons?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 12,\n    \"owner_id\": {\n      \"id\": 123,\n      \"name\": \"Jane Doe\",\n      \"email\": \"jane@pipedrive.com\",\n      \"has_pic\": 1,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 123\n    },\n    \"org_id\": {\n      \"name\": \"Org Name\",\n      \"people_count\": 1,\n      \"owner_id\": 123,\n      \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n      \"active_flag\": true,\n      \"cc_email\": \"org@pipedrivemail.com\",\n      \"value\": 1234\n    },\n    \"name\": \"Will Smith\",\n    \"first_name\": \"Will\",\n    \"last_name\": \"Smith\",\n    \"open_deals_count\": 2,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 3,\n    \"participant_open_deals_count\": 1,\n    \"participant_closed_deals_count\": 1,\n    \"email_messages_count\": 1,\n    \"activities_count\": 1,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 2,\n    \"files_count\": 2,\n    \"notes_count\": 2,\n    \"followers_count\": 3,\n    \"won_deals_count\": 3,\n    \"related_won_deals_count\": 3,\n    \"lost_deals_count\": 1,\n    \"related_lost_deals_count\": 1,\n    \"active_flag\": true,\n    \"phone\": [\n      {\n        \"value\": \"12345\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"email\": [\n      {\n        \"value\": \"12345@email.com\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"primary_email\": \"12345@email.com\",\n    \"first_char\": \"w\",\n    \"update_time\": \"2020-05-08 05:30:20\",\n    \"add_time\": \"2017-10-18 13:23:07\",\n    \"visible_to\": \"3\",\n    \"marketing_status\": \"no_consent\",\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n      },\n      \"value\": 4\n    },\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n    \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n    \"label\": 1,\n    \"label_ids\": [\n      1,\n      2,\n      3\n    ],\n    \"org_name\": \"Organization name\",\n    \"owner_name\": \"Jane Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add a person - invalid email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();\r",
											"pm.environment.set(\"add_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"Forbidden to take this action.\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"peron ID should not be present\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.not.have.property(\"id\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Foxy brown souvenirs\",\n  \"owner_id\": {{user_id}},\n  \"org_id\": {{organization_id_1}},\n  \"email\": [\n    {\n      \"value\": \"foxybrown\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"0802345858\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"07012345676\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"label\": \"\",\n  \"label_ids\": [],\n  \"visible_to\": \"3\",\n  \"marketing_status\": \"\",\n  \"add_time\": \"{{add_time}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/persons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									]
								},
								"description": "Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"org_id\": \"<integer>\",\n  \"email\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\",\n  \"marketing_status\": \"<string>\",\n  \"add_time\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/persons?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 12,\n    \"owner_id\": {\n      \"id\": 123,\n      \"name\": \"Jane Doe\",\n      \"email\": \"jane@pipedrive.com\",\n      \"has_pic\": 1,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 123\n    },\n    \"org_id\": {\n      \"name\": \"Org Name\",\n      \"people_count\": 1,\n      \"owner_id\": 123,\n      \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n      \"active_flag\": true,\n      \"cc_email\": \"org@pipedrivemail.com\",\n      \"value\": 1234\n    },\n    \"name\": \"Will Smith\",\n    \"first_name\": \"Will\",\n    \"last_name\": \"Smith\",\n    \"open_deals_count\": 2,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 3,\n    \"participant_open_deals_count\": 1,\n    \"participant_closed_deals_count\": 1,\n    \"email_messages_count\": 1,\n    \"activities_count\": 1,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 2,\n    \"files_count\": 2,\n    \"notes_count\": 2,\n    \"followers_count\": 3,\n    \"won_deals_count\": 3,\n    \"related_won_deals_count\": 3,\n    \"lost_deals_count\": 1,\n    \"related_lost_deals_count\": 1,\n    \"active_flag\": true,\n    \"phone\": [\n      {\n        \"value\": \"12345\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"email\": [\n      {\n        \"value\": \"12345@email.com\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"primary_email\": \"12345@email.com\",\n    \"first_char\": \"w\",\n    \"update_time\": \"2020-05-08 05:30:20\",\n    \"add_time\": \"2017-10-18 13:23:07\",\n    \"visible_to\": \"3\",\n    \"marketing_status\": \"no_consent\",\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n      },\n      \"value\": 4\n    },\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n    \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n    \"label\": 1,\n    \"label_ids\": [\n      1,\n      2,\n      3\n    ],\n    \"org_name\": \"Organization name\",\n    \"owner_name\": \"Jane Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add a person - invalid user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();\r",
											"pm.environment.set(\"add_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"Forbidden to take this action.\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"peron ID should not be present\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.not.have.property(\"id\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Foxy brown souvenirs\",\n  \"owner_id\": {{UserID_1}},\n  \"org_id\": {{organization_id_1}},\n  \"email\": [\n    {\n      \"value\": \"foxybrown\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"0802345858\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"07012345676\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"label\": \"\",\n  \"label_ids\": [],\n  \"visible_to\": \"3\",\n  \"marketing_status\": \"\",\n  \"add_time\": \"{{add_time}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/persons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									]
								},
								"description": "Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"org_id\": \"<integer>\",\n  \"email\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\",\n  \"marketing_status\": \"<string>\",\n  \"add_time\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/persons?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 12,\n    \"owner_id\": {\n      \"id\": 123,\n      \"name\": \"Jane Doe\",\n      \"email\": \"jane@pipedrive.com\",\n      \"has_pic\": 1,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 123\n    },\n    \"org_id\": {\n      \"name\": \"Org Name\",\n      \"people_count\": 1,\n      \"owner_id\": 123,\n      \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n      \"active_flag\": true,\n      \"cc_email\": \"org@pipedrivemail.com\",\n      \"value\": 1234\n    },\n    \"name\": \"Will Smith\",\n    \"first_name\": \"Will\",\n    \"last_name\": \"Smith\",\n    \"open_deals_count\": 2,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 3,\n    \"participant_open_deals_count\": 1,\n    \"participant_closed_deals_count\": 1,\n    \"email_messages_count\": 1,\n    \"activities_count\": 1,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 2,\n    \"files_count\": 2,\n    \"notes_count\": 2,\n    \"followers_count\": 3,\n    \"won_deals_count\": 3,\n    \"related_won_deals_count\": 3,\n    \"lost_deals_count\": 1,\n    \"related_lost_deals_count\": 1,\n    \"active_flag\": true,\n    \"phone\": [\n      {\n        \"value\": \"12345\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"email\": [\n      {\n        \"value\": \"12345@email.com\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"primary_email\": \"12345@email.com\",\n    \"first_char\": \"w\",\n    \"update_time\": \"2020-05-08 05:30:20\",\n    \"add_time\": \"2017-10-18 13:23:07\",\n    \"visible_to\": \"3\",\n    \"marketing_status\": \"no_consent\",\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n      },\n      \"value\": 4\n    },\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n    \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n    \"label\": 1,\n    \"label_ids\": [\n      1,\n      2,\n      3\n    ],\n    \"org_name\": \"Organization name\",\n    \"owner_name\": \"Jane Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add a person - invalid user Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();\r",
											"pm.environment.set(\"add_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"validate response body and structure\", function() {pm.expect(jsonData).to.have.property(\"success\", false);\r",
											"pm.expect(jsonData).to.have.property(\"error\", \"Organization not found.\");\r",
											"pm.expect(jsonData).to.have.property(\"error_info\").that.includes(\"developers.pipedrive.com\");\r",
											"pm.expect(jsonData).to.have.property(\"data\", null);\r",
											"pm.expect(jsonData).to.have.property(\"additional_data\", null);\r",
											"\r",
											"    });\r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"person ID should not be present\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.not.have.property(\"id\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Foxy brown souvenirs\",\n  \"owner_id\": {{user_id}},\n  \"org_id\": 100,\n  \"email\": [\n    {\n      \"value\": \"foxybrown\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"0802345858\",\n      \"primary\": true,\n      \"label\": \"\"\n    },\n    {\n      \"value\": \"07012345676\",\n      \"primary\": true,\n      \"label\": \"\"\n    }\n  ],\n  \"label\": \"\",\n  \"label_ids\": [],\n  \"visible_to\": \"3\",\n  \"marketing_status\": \"\",\n  \"add_time\": \"{{add_time}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/persons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									]
								},
								"description": "Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"org_id\": \"<integer>\",\n  \"email\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    },\n    {\n      \"value\": \"<string>\",\n      \"primary\": \"<boolean>\",\n      \"label\": \"<string>\"\n    }\n  ],\n  \"label\": \"<integer>\",\n  \"label_ids\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"visible_to\": \"<string>\",\n  \"marketing_status\": \"<string>\",\n  \"add_time\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/persons?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"company_id\": 12,\n    \"owner_id\": {\n      \"id\": 123,\n      \"name\": \"Jane Doe\",\n      \"email\": \"jane@pipedrive.com\",\n      \"has_pic\": 1,\n      \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n      \"active_flag\": true,\n      \"value\": 123\n    },\n    \"org_id\": {\n      \"name\": \"Org Name\",\n      \"people_count\": 1,\n      \"owner_id\": 123,\n      \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n      \"active_flag\": true,\n      \"cc_email\": \"org@pipedrivemail.com\",\n      \"value\": 1234\n    },\n    \"name\": \"Will Smith\",\n    \"first_name\": \"Will\",\n    \"last_name\": \"Smith\",\n    \"open_deals_count\": 2,\n    \"related_open_deals_count\": 2,\n    \"closed_deals_count\": 3,\n    \"related_closed_deals_count\": 3,\n    \"participant_open_deals_count\": 1,\n    \"participant_closed_deals_count\": 1,\n    \"email_messages_count\": 1,\n    \"activities_count\": 1,\n    \"done_activities_count\": 1,\n    \"undone_activities_count\": 2,\n    \"files_count\": 2,\n    \"notes_count\": 2,\n    \"followers_count\": 3,\n    \"won_deals_count\": 3,\n    \"related_won_deals_count\": 3,\n    \"lost_deals_count\": 1,\n    \"related_lost_deals_count\": 1,\n    \"active_flag\": true,\n    \"phone\": [\n      {\n        \"value\": \"12345\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"email\": [\n      {\n        \"value\": \"12345@email.com\",\n        \"primary\": true,\n        \"label\": \"work\"\n      }\n    ],\n    \"primary_email\": \"12345@email.com\",\n    \"first_char\": \"w\",\n    \"update_time\": \"2020-05-08 05:30:20\",\n    \"add_time\": \"2017-10-18 13:23:07\",\n    \"visible_to\": \"3\",\n    \"marketing_status\": \"no_consent\",\n    \"picture_id\": {\n      \"item_type\": \"person\",\n      \"item_id\": 25,\n      \"active_flag\": true,\n      \"add_time\": \"2020-09-08 08:17:52\",\n      \"update_time\": \"0000-00-00 00:00:00\",\n      \"added_by_user_id\": 967055,\n      \"pictures\": {\n        \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n        \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n      },\n      \"value\": 4\n    },\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": 34,\n    \"last_activity_date\": \"2019-11-28\",\n    \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n    \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n    \"label\": 1,\n    \"label_ids\": [\n      1,\n      2,\n      3\n    ],\n    \"org_name\": \"Organization name\",\n    \"owner_name\": \"Jane Doe\",\n    \"cc_email\": \"org@pipedrivemail.com\"\n  },\n  \"related_objects\": {\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    }\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "get all persons",
					"item": [
						{
							"name": "Get all persons invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Response should not contain data\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.not.have.property(\"data\");\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											" var jsonData = pm.response.json();\r",
											"\r",
											"// Store organization ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");  \r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"User friendly messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"    pm.expect(jsonData.error).to.include(\"user_id must be an integer\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"\r",
											"   });  \r",
											"    \r",
											"// Validate response status code\r",
											"pm.test(\"Bad request!\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400,422]);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validate response time\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/persons?user_id=mary&start=0&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									],
									"query": [
										{
											"key": "user_id",
											"value": "mary",
											"description": "If supplied, only persons owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied."
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "first_char",
											"value": "<string>",
											"description": "If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)",
											"disabled": true
										},
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Items shown per page"
										},
										{
											"key": "sort",
											"value": "<string>",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).",
											"disabled": true
										}
									]
								},
								"description": "Returns all persons."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/persons?user_id=<integer>&filter_id=<integer>&first_char=<string>&start=0&limit=<integer>&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "user_id",
													"value": "<integer>"
												},
												{
													"key": "filter_id",
													"value": "<integer>"
												},
												{
													"key": "first_char",
													"value": "<string>"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"company_id\": 12,\n      \"owner_id\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true,\n        \"value\": 123\n      },\n      \"org_id\": {\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\",\n        \"value\": 1234\n      },\n      \"name\": \"Will Smith\",\n      \"first_name\": \"Will\",\n      \"last_name\": \"Smith\",\n      \"open_deals_count\": 2,\n      \"related_open_deals_count\": 2,\n      \"closed_deals_count\": 3,\n      \"related_closed_deals_count\": 3,\n      \"participant_open_deals_count\": 1,\n      \"participant_closed_deals_count\": 1,\n      \"email_messages_count\": 1,\n      \"activities_count\": 1,\n      \"done_activities_count\": 1,\n      \"undone_activities_count\": 2,\n      \"files_count\": 2,\n      \"notes_count\": 2,\n      \"followers_count\": 3,\n      \"won_deals_count\": 3,\n      \"related_won_deals_count\": 3,\n      \"lost_deals_count\": 1,\n      \"related_lost_deals_count\": 1,\n      \"active_flag\": true,\n      \"phone\": [\n        {\n          \"value\": \"12345\",\n          \"primary\": true,\n          \"label\": \"work\"\n        }\n      ],\n      \"email\": [\n        {\n          \"value\": \"12345@email.com\",\n          \"primary\": true,\n          \"label\": \"work\"\n        }\n      ],\n      \"primary_email\": \"12345@email.com\",\n      \"first_char\": \"w\",\n      \"update_time\": \"2020-05-08 05:30:20\",\n      \"add_time\": \"2017-10-18 13:23:07\",\n      \"visible_to\": \"3\",\n      \"marketing_status\": \"no_consent\",\n      \"picture_id\": {\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        },\n        \"value\": 4\n      },\n      \"next_activity_date\": \"2019-11-29\",\n      \"next_activity_time\": \"11:30:00\",\n      \"next_activity_id\": 128,\n      \"last_activity_id\": 34,\n      \"last_activity_date\": \"2019-11-28\",\n      \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n      \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n      \"label\": 1,\n      \"label_ids\": [\n        1,\n        2,\n        3\n      ],\n      \"org_name\": \"Organization name\",\n      \"owner_name\": \"Jane Doe\",\n      \"cc_email\": \"org@pipedrivemail.com\"\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false,\n      \"next_start\": 100\n    }\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Get all persons valid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Response should  contain data\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.have.property(\"data\");\r",
											"});\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"// Validate response body datatype\r",
											"\r",
											"pm.test(\"Valid response body datatype\", function () {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].id)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data[0].owner_id).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.data[0].owner_id.id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].owner_id.id)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data[0].owner_id.name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].owner_id.email).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].owner_id.has_pic).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].owner_id.has_pic)).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data[0].owner_id.active_flag).to.be.true;\r",
											"    pm.expect(jsonData.data[0].owner_id.value).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data[0].owner_id.value)).to.be.true;\r",
											"\r",
											"    pm.expect(jsonData.data[0].org_id.name).to.be.a(\"string\");\r",
											"     pm.expect(jsonData.data[0].org_id.people_count).to.be.a(\"number\");\r",
											"      pm.expect(Number.isInteger(jsonData.data[0].org_id.people_count)).to.be.true;\r",
											"       pm.expect(jsonData.data[0].org_id.owner_id).to.be.a(\"number\");\r",
											"      pm.expect(Number.isInteger(jsonData.data[0].org_id.owner_id)).to.be.true;\r",
											"      pm.expect(jsonData.data[0].org_id.address).to.be.null;\r",
											"      pm.expect(jsonData.data[0].org_id.label_ids).to.be.an(\"array\");\r",
											"      pm.expect(jsonData.data[0].org_id.active_flag).to.be.a(\"boolean\");\r",
											"      pm.expect(jsonData.data[0].org_id.cc_email).to.be.a(\"string\");\r",
											"       pm.expect(jsonData.data[0].org_id.owner_name).to.be.a(\"string\");\r",
											"       pm.expect(jsonData.data[0].org_id.value).to.be.a(\"number\");\r",
											"      pm.expect(Number.isInteger(jsonData.data[0].org_id.value)).to.be.true;\r",
											"      pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"       pm.expect(jsonData.data[0].first_name).to.be.a(\"string\");\r",
											"       pm.expect(jsonData.data[0].last_name).to.be.a(\"string\");\r",
											"       pm.expect(jsonData.data[0].open_deals_count).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.data[0].related_open_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].closed_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].related_closed_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].participant_open_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].participant_closed_deals_count).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.data[0].email_messages_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].activities_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].done_activities_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].undone_activities_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].files_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].notes_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].followers_count).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.data[0].won_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].related_won_deals_count).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].lost_deals_count).to.be.a(\"number\");\r",
											"     pm.expect(jsonData.data[0].related_lost_deals_count).to.be.a(\"number\");\r",
											"\r",
											"    \r",
											"    pm.expect(jsonData.data[0].active_flag).to.be.true;\r",
											"    pm.expect(jsonData.data[0].phone).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data[0].phone[0].label).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data[0].phone[0].value).to.be.a(\"string\");\r",
											"pm.expect(jsonData.data[0].phone[0].primary).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data[0].email[0]).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.data[0].email[0].label).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data[0].email[0].value).to.be.a(\"string\");\r",
											"pm.expect(jsonData.data[0].email[0].primary).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data[0].first_char).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.data[0].delete_time).to.be.null;\r",
											"    \r",
											"    pm.expect(jsonData.data[0].visible_to).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].picture_id).to.be.null; \r",
											"    \r",
											"\r",
											"\r",
											"    pm.expect(jsonData.data[0].next_activity_date).to.be.null;\r",
											"    pm.expect(jsonData.data[0].next_activity_time).to.be.null;\r",
											"    pm.expect(jsonData.data[0].next_activity_id).to.be.null;\r",
											"    pm.expect(jsonData.data[0].last_activity_id).to.be.null;\r",
											"    pm.expect(jsonData.data[0].last_activity_date).to.be.null;\r",
											"    pm.expect(jsonData.data[0].last_incoming_mail_time).to.be.null;\r",
											"  pm.expect(jsonData.data[0].last_outgoing_mail_time).to.be.null;\r",
											"    pm.expect(jsonData.data[0].label).to.be.null;\r",
											"    pm.expect(jsonData.data[0].label_ids).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data[0].im).to.be.an(\"array\");\r",
											"\r",
											"  \r",
											"\r",
											"    pm.expect(jsonData.additional_data).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.additional_data.pagination.start).to.be.a(\"number\");\r",
											"      pm.expect(jsonData.additional_data.pagination.limit).to.be.a(\"number\");\r",
											"      pm.expect(jsonData.additional_data.pagination.more_items_in_collection).to.be.a(\"boolean\");\r",
											"\r",
											"\r",
											"    pm.expect(jsonData.related_objects).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.related_objects.organization).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"    let timestamp = new Date(jsonData.data[0].update_time);\r",
											"    pm.test(\"Validate update_time timestamp\", function () {\r",
											"        pm.expect(timestamp.getTime()).to.be.a(\"number\").that.is.not.NaN;\r",
											"    });\r",
											"\r",
											"    let timestamp1 = new Date(jsonData.data[0].add_time);\r",
											"    pm.test(\"Validate add_time timestamp\", function () {\r",
											"        pm.expect(timestamp1.getTime()).to.be.a(\"number\").that.is.not.NaN;\r",
											"    });\r",
											"    \r",
											"    //validating error messages\r",
											"   pm.test(\"vallidating response messages\", function () {\r",
											"    pm.expect(jsonData.success).to.equal(true);\r",
											"   \r",
											"   });\r",
											"// Validate response status code\r",
											"pm.test(\"operation successful!\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/persons?user_id={{user_id}}&start=0&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"description": "If supplied, only persons owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied."
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "first_char",
											"value": "<string>",
											"description": "If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)",
											"disabled": true
										},
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Items shown per page"
										},
										{
											"key": "sort",
											"value": "<string>",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).",
											"disabled": true
										}
									]
								},
								"description": "Returns all persons."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/persons?user_id=<integer>&filter_id=<integer>&first_char=<string>&start=0&limit=<integer>&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "user_id",
													"value": "<integer>"
												},
												{
													"key": "filter_id",
													"value": "<integer>"
												},
												{
													"key": "first_char",
													"value": "<string>"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"company_id\": 12,\n      \"owner_id\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true,\n        \"value\": 123\n      },\n      \"org_id\": {\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\",\n        \"value\": 1234\n      },\n      \"name\": \"Will Smith\",\n      \"first_name\": \"Will\",\n      \"last_name\": \"Smith\",\n      \"open_deals_count\": 2,\n      \"related_open_deals_count\": 2,\n      \"closed_deals_count\": 3,\n      \"related_closed_deals_count\": 3,\n      \"participant_open_deals_count\": 1,\n      \"participant_closed_deals_count\": 1,\n      \"email_messages_count\": 1,\n      \"activities_count\": 1,\n      \"done_activities_count\": 1,\n      \"undone_activities_count\": 2,\n      \"files_count\": 2,\n      \"notes_count\": 2,\n      \"followers_count\": 3,\n      \"won_deals_count\": 3,\n      \"related_won_deals_count\": 3,\n      \"lost_deals_count\": 1,\n      \"related_lost_deals_count\": 1,\n      \"active_flag\": true,\n      \"phone\": [\n        {\n          \"value\": \"12345\",\n          \"primary\": true,\n          \"label\": \"work\"\n        }\n      ],\n      \"email\": [\n        {\n          \"value\": \"12345@email.com\",\n          \"primary\": true,\n          \"label\": \"work\"\n        }\n      ],\n      \"primary_email\": \"12345@email.com\",\n      \"first_char\": \"w\",\n      \"update_time\": \"2020-05-08 05:30:20\",\n      \"add_time\": \"2017-10-18 13:23:07\",\n      \"visible_to\": \"3\",\n      \"marketing_status\": \"no_consent\",\n      \"picture_id\": {\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        },\n        \"value\": 4\n      },\n      \"next_activity_date\": \"2019-11-29\",\n      \"next_activity_time\": \"11:30:00\",\n      \"next_activity_id\": 128,\n      \"last_activity_id\": 34,\n      \"last_activity_date\": \"2019-11-28\",\n      \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n      \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n      \"label\": 1,\n      \"label_ids\": [\n        1,\n        2,\n        3\n      ],\n      \"org_name\": \"Organization name\",\n      \"owner_name\": \"Jane Doe\",\n      \"cc_email\": \"org@pipedrivemail.com\"\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false,\n      \"next_start\": 100\n    }\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Get all persons unauthorised_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/persons?user_id={{user_id}}&start=0&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"description": "If supplied, only persons owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied."
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "first_char",
											"value": "<string>",
											"description": "If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)",
											"disabled": true
										},
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Items shown per page"
										},
										{
											"key": "sort",
											"value": "<string>",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).",
											"disabled": true
										}
									]
								},
								"description": "Returns all persons."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/persons?user_id=<integer>&filter_id=<integer>&first_char=<string>&start=0&limit=<integer>&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "user_id",
													"value": "<integer>"
												},
												{
													"key": "filter_id",
													"value": "<integer>"
												},
												{
													"key": "first_char",
													"value": "<string>"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"company_id\": 12,\n      \"owner_id\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true,\n        \"value\": 123\n      },\n      \"org_id\": {\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\",\n        \"value\": 1234\n      },\n      \"name\": \"Will Smith\",\n      \"first_name\": \"Will\",\n      \"last_name\": \"Smith\",\n      \"open_deals_count\": 2,\n      \"related_open_deals_count\": 2,\n      \"closed_deals_count\": 3,\n      \"related_closed_deals_count\": 3,\n      \"participant_open_deals_count\": 1,\n      \"participant_closed_deals_count\": 1,\n      \"email_messages_count\": 1,\n      \"activities_count\": 1,\n      \"done_activities_count\": 1,\n      \"undone_activities_count\": 2,\n      \"files_count\": 2,\n      \"notes_count\": 2,\n      \"followers_count\": 3,\n      \"won_deals_count\": 3,\n      \"related_won_deals_count\": 3,\n      \"lost_deals_count\": 1,\n      \"related_lost_deals_count\": 1,\n      \"active_flag\": true,\n      \"phone\": [\n        {\n          \"value\": \"12345\",\n          \"primary\": true,\n          \"label\": \"work\"\n        }\n      ],\n      \"email\": [\n        {\n          \"value\": \"12345@email.com\",\n          \"primary\": true,\n          \"label\": \"work\"\n        }\n      ],\n      \"primary_email\": \"12345@email.com\",\n      \"first_char\": \"w\",\n      \"update_time\": \"2020-05-08 05:30:20\",\n      \"add_time\": \"2017-10-18 13:23:07\",\n      \"visible_to\": \"3\",\n      \"marketing_status\": \"no_consent\",\n      \"picture_id\": {\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        },\n        \"value\": 4\n      },\n      \"next_activity_date\": \"2019-11-29\",\n      \"next_activity_time\": \"11:30:00\",\n      \"next_activity_id\": 128,\n      \"last_activity_id\": 34,\n      \"last_activity_date\": \"2019-11-28\",\n      \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n      \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n      \"label\": 1,\n      \"label_ids\": [\n        1,\n        2,\n        3\n      ],\n      \"org_name\": \"Organization name\",\n      \"owner_name\": \"Jane Doe\",\n      \"cc_email\": \"org@pipedrivemail.com\"\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false,\n      \"next_start\": 100\n    }\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Get all persons wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"wrong request method \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(405)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"wrong request method\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"this is a wrong request method.\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/persons?user_id={{user_id}}&start=0&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"persons"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"description": "If supplied, only persons owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied."
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "first_char",
											"value": "<string>",
											"description": "If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)",
											"disabled": true
										},
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Items shown per page"
										},
										{
											"key": "sort",
											"value": "<string>",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).",
											"disabled": true
										}
									]
								},
								"description": "Returns all persons."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/persons?user_id=<integer>&filter_id=<integer>&first_char=<string>&start=0&limit=<integer>&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "user_id",
													"value": "<integer>"
												},
												{
													"key": "filter_id",
													"value": "<integer>"
												},
												{
													"key": "first_char",
													"value": "<string>"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"company_id\": 12,\n      \"owner_id\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true,\n        \"value\": 123\n      },\n      \"org_id\": {\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\",\n        \"value\": 1234\n      },\n      \"name\": \"Will Smith\",\n      \"first_name\": \"Will\",\n      \"last_name\": \"Smith\",\n      \"open_deals_count\": 2,\n      \"related_open_deals_count\": 2,\n      \"closed_deals_count\": 3,\n      \"related_closed_deals_count\": 3,\n      \"participant_open_deals_count\": 1,\n      \"participant_closed_deals_count\": 1,\n      \"email_messages_count\": 1,\n      \"activities_count\": 1,\n      \"done_activities_count\": 1,\n      \"undone_activities_count\": 2,\n      \"files_count\": 2,\n      \"notes_count\": 2,\n      \"followers_count\": 3,\n      \"won_deals_count\": 3,\n      \"related_won_deals_count\": 3,\n      \"lost_deals_count\": 1,\n      \"related_lost_deals_count\": 1,\n      \"active_flag\": true,\n      \"phone\": [\n        {\n          \"value\": \"12345\",\n          \"primary\": true,\n          \"label\": \"work\"\n        }\n      ],\n      \"email\": [\n        {\n          \"value\": \"12345@email.com\",\n          \"primary\": true,\n          \"label\": \"work\"\n        }\n      ],\n      \"primary_email\": \"12345@email.com\",\n      \"first_char\": \"w\",\n      \"update_time\": \"2020-05-08 05:30:20\",\n      \"add_time\": \"2017-10-18 13:23:07\",\n      \"visible_to\": \"3\",\n      \"marketing_status\": \"no_consent\",\n      \"picture_id\": {\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        },\n        \"value\": 4\n      },\n      \"next_activity_date\": \"2019-11-29\",\n      \"next_activity_time\": \"11:30:00\",\n      \"next_activity_id\": 128,\n      \"last_activity_id\": 34,\n      \"last_activity_date\": \"2019-11-28\",\n      \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n      \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n      \"label\": 1,\n      \"label_ids\": [\n        1,\n        2,\n        3\n      ],\n      \"org_name\": \"Organization name\",\n      \"owner_name\": \"Jane Doe\",\n      \"cc_email\": \"org@pipedrivemail.com\"\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false,\n      \"next_start\": 100\n    }\n  },\n  \"related_objects\": {\n    \"organization\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Org Name\",\n        \"people_count\": 1,\n        \"owner_id\": 123,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"user\": {\n      \"123\": {\n        \"id\": 123,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@pipedrive.com\",\n        \"has_pic\": 1,\n        \"pic_hash\": \"2611ace8ac6a3afe2f69ed56f9e08c6b\",\n        \"active_flag\": true\n      }\n    },\n    \"picture\": {\n      \"1\": {\n        \"id\": 1,\n        \"item_type\": \"person\",\n        \"item_id\": 25,\n        \"active_flag\": true,\n        \"add_time\": \"2020-09-08 08:17:52\",\n        \"update_time\": \"0000-00-00 00:00:00\",\n        \"added_by_user_id\": 967055,\n        \"pictures\": {\n          \"128\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_128.jpg\",\n          \"512\": \"https://pipedrive-profile-pics.s3.example.com/f8893852574273f2747bf6ef09d11cfb4ac8f269_512.jpg\"\n        }\n      }\n    }\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Currency",
			"item": [
				{
					"name": "Get supported currency",
					"item": [
						{
							"name": "Get all supported currencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"const index = jsonData.data.findIndex(item => item.code === \"NGN\");\r",
											"\r",
											"console.log(index);\r",
											"\r",
											"\r",
											"pm.environment.set(\"NIGERIA_CURR\", jsonData.data[115].code);\r",
											"\r",
											"pm.environment.get(\"NIGERIA_CURR\");\r",
											"\r",
											"\r",
											"pm.test(\"validating responsebody datatype\", function() {\r",
											"pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"pm.expect(jsonData.data[0].symbol).to.be.a(\"string\");\r",
											"pm.expect(jsonData.data[0].decimal_points).to.be.a(\"number\");\r",
											"pm.expect(jsonData.data[0].active_flag).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].is_custom_flag).to.be.a(\"boolean\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"validating responsebody message\", function() {\r",
											"pm.expect(jsonData).to.be.an(\"object\");\r",
											"pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/currencies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"currencies"
									],
									"query": [
										{
											"key": "term",
											"value": "<string>",
											"description": "Optional search term that is searched for from currency's name and/or code",
											"disabled": true
										}
									]
								},
								"description": "Returns all supported currencies in given account which should be used when saving monetary values with other objects. The `code` parameter of the returning objects is the currency code according to ISO 4217 for all non-custom currencies."
							},
							"response": [
								{
									"name": "The list of supported currencies",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/currencies?term=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"currencies"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"code\": \"EUR\",\n      \"name\": \"Euro\",\n      \"decimal_points\": 2,\n      \"symbol\": \"€\",\n      \"active_flag\": true,\n      \"is_custom_flag\": false\n    },\n    {\n      \"id\": 2,\n      \"code\": \"USD\",\n      \"name\": \"US Dollar\",\n      \"decimal_points\": 2,\n      \"symbol\": \"$\",\n      \"active_flag\": true,\n      \"is_custom_flag\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all supported currencies - unauthorised_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/currencies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"currencies"
									],
									"query": [
										{
											"key": "term",
											"value": "<string>",
											"description": "Optional search term that is searched for from currency's name and/or code",
											"disabled": true
										}
									]
								},
								"description": "Returns all supported currencies in given account which should be used when saving monetary values with other objects. The `code` parameter of the returning objects is the currency code according to ISO 4217 for all non-custom currencies."
							},
							"response": [
								{
									"name": "The list of supported currencies",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/currencies?term=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"currencies"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"code\": \"EUR\",\n      \"name\": \"Euro\",\n      \"decimal_points\": 2,\n      \"symbol\": \"€\",\n      \"active_flag\": true,\n      \"is_custom_flag\": false\n    },\n    {\n      \"id\": 2,\n      \"code\": \"USD\",\n      \"name\": \"US Dollar\",\n      \"decimal_points\": 2,\n      \"symbol\": \"$\",\n      \"active_flag\": true,\n      \"is_custom_flag\": false\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all supported currencies - wrong request method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"wrong request method \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(405)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"wrong request method\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"Unknown method\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.status).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.status).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    \r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/currencies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"currencies"
									],
									"query": [
										{
											"key": "term",
											"value": "<string>",
											"description": "Optional search term that is searched for from currency's name and/or code",
											"disabled": true
										}
									]
								},
								"description": "Returns all supported currencies in given account which should be used when saving monetary values with other objects. The `code` parameter of the returning objects is the currency code according to ISO 4217 for all non-custom currencies."
							},
							"response": [
								{
									"name": "The list of supported currencies",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/currencies?term=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"currencies"
											],
											"query": [
												{
													"key": "term",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"code\": \"EUR\",\n      \"name\": \"Euro\",\n      \"decimal_points\": 2,\n      \"symbol\": \"€\",\n      \"active_flag\": true,\n      \"is_custom_flag\": false\n    },\n    {\n      \"id\": 2,\n      \"code\": \"USD\",\n      \"name\": \"US Dollar\",\n      \"decimal_points\": 2,\n      \"symbol\": \"$\",\n      \"active_flag\": true,\n      \"is_custom_flag\": false\n    }\n  ]\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "DealFields",
			"item": [
				{
					"name": "Get dealfields",
					"item": [
						{
							"name": "Get all deal fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"//validating response body structure\r",
											"pm.test(\"valid response body structure\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].key).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].group_id).to.be.null;\r",
											"    pm.expect(jsonData.data[0].order_nr).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].field_type).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].json_column_flag).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data[0].add_time).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].update_time).to.be.null;\r",
											"    pm.expect(jsonData.data[0].last_updated_by_user_id).to.be.null;\r",
											"    pm.expect(jsonData.data[0].edit_flag).to.be.a(\"boolean\");\r",
											"    \r",
											"     pm.expect(jsonData.data[0].details_visible_flag).to.be.a(\"boolean\");\r",
											"      pm.expect(jsonData.data[0].add_visible_flag).to.be.a(\"boolean\");\r",
											"       pm.expect(jsonData.data[0].important_flag).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].bulk_edit_allowed).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].filtering_allowed).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].sortable_flag).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].mandatory_flag).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].searchable_flag).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].restriction_settings).to.be.an(\"array\");\r",
											"pm.expect(jsonData.data[0].user_restrictions).to.be.null;\r",
											"pm.expect(jsonData.data[0].description).to.be.null;\r",
											"pm.expect(jsonData.data[0].created_by_user_id).to.be.null;\r",
											"pm.expect(jsonData.data[0].active_flag).to.be.a(\"boolean\");\r",
											"pm.expect(jsonData.data[0].projects_detail_visible_flag).to.be.a(\"boolean\");\r",
											"\r",
											"pm.expect(jsonData.data[0].show_in_pipelines).to.be.an(\"object\");\r",
											"//validating message\r",
											"pm.test(\"operation is successful\", function() {\r",
											"    pm.expect(jsonData.success).to.equal(true);\r",
											"});\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dealFields?start=0&limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dealFields"
									],
									"query": [
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Items shown per page"
										}
									]
								},
								"description": "Returns data about all deal fields."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dealFields?start=0&limit=<integer>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dealFields"
											],
											"query": [
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"key\": \"title\",\n      \"name\": \"Title\",\n      \"order_nr\": 2,\n      \"field_type\": \"varchar\",\n      \"add_time\": \"2019-02-04 13:58:03\",\n      \"update_time\": \"2019-02-04 13:58:03\",\n      \"last_updated_by_user_id\": 1,\n      \"created_by_user_id\": 1,\n      \"active_flag\": true,\n      \"edit_flag\": false,\n      \"index_visible_flag\": true,\n      \"details_visible_flag\": true,\n      \"add_visible_flag\": true,\n      \"important_flag\": false,\n      \"bulk_edit_allowed\": true,\n      \"searchable_flag\": false,\n      \"filtering_allowed\": true,\n      \"sortable_flag\": true,\n      \"options\": null,\n      \"mandatory_flag\": true\n    },\n    {\n      \"id\": 2,\n      \"key\": \"9dc80c50d78a15643bfc4ca79d76156a73a1ca0e\",\n      \"name\": \"Customer Type\",\n      \"order_nr\": 1,\n      \"field_type\": \"enum\",\n      \"add_time\": \"2019-02-04 13:58:03\",\n      \"update_time\": \"2019-02-04 13:58:03\",\n      \"last_updated_by_user_id\": 1,\n      \"created_by_user_id\": 1,\n      \"active_flag\": true,\n      \"edit_flag\": true,\n      \"index_visible_flag\": true,\n      \"details_visible_flag\": true,\n      \"add_visible_flag\": false,\n      \"important_flag\": false,\n      \"bulk_edit_allowed\": true,\n      \"searchable_flag\": false,\n      \"filtering_allowed\": true,\n      \"sortable_flag\": true,\n      \"options\": [\n        {\n          \"id\": 190,\n          \"label\": \"Private person\"\n        },\n        {\n          \"id\": 191,\n          \"label\": \"Company\"\n        },\n        {\n          \"id\": 192,\n          \"label\": \"Government\"\n        }\n      ],\n      \"mandatory_flag\": true\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Get all deal fields - unauthorised_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dealFields?start=0&limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dealFields"
									],
									"query": [
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Items shown per page"
										}
									]
								},
								"description": "Returns data about all deal fields."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dealFields?start=0&limit=<integer>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dealFields"
											],
											"query": [
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"key\": \"title\",\n      \"name\": \"Title\",\n      \"order_nr\": 2,\n      \"field_type\": \"varchar\",\n      \"add_time\": \"2019-02-04 13:58:03\",\n      \"update_time\": \"2019-02-04 13:58:03\",\n      \"last_updated_by_user_id\": 1,\n      \"created_by_user_id\": 1,\n      \"active_flag\": true,\n      \"edit_flag\": false,\n      \"index_visible_flag\": true,\n      \"details_visible_flag\": true,\n      \"add_visible_flag\": true,\n      \"important_flag\": false,\n      \"bulk_edit_allowed\": true,\n      \"searchable_flag\": false,\n      \"filtering_allowed\": true,\n      \"sortable_flag\": true,\n      \"options\": null,\n      \"mandatory_flag\": true\n    },\n    {\n      \"id\": 2,\n      \"key\": \"9dc80c50d78a15643bfc4ca79d76156a73a1ca0e\",\n      \"name\": \"Customer Type\",\n      \"order_nr\": 1,\n      \"field_type\": \"enum\",\n      \"add_time\": \"2019-02-04 13:58:03\",\n      \"update_time\": \"2019-02-04 13:58:03\",\n      \"last_updated_by_user_id\": 1,\n      \"created_by_user_id\": 1,\n      \"active_flag\": true,\n      \"edit_flag\": true,\n      \"index_visible_flag\": true,\n      \"details_visible_flag\": true,\n      \"add_visible_flag\": false,\n      \"important_flag\": false,\n      \"bulk_edit_allowed\": true,\n      \"searchable_flag\": false,\n      \"filtering_allowed\": true,\n      \"sortable_flag\": true,\n      \"options\": [\n        {\n          \"id\": 190,\n          \"label\": \"Private person\"\n        },\n        {\n          \"id\": 191,\n          \"label\": \"Company\"\n        },\n        {\n          \"id\": 192,\n          \"label\": \"Government\"\n        }\n      ],\n      \"mandatory_flag\": true\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Get all deal fields - invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"This is a bad request\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(400)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Invalid parameter\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "c074d69d8f8187fe64d35965125f4fe26496ba58",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dealFields?startone=0&limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dealFields"
									],
									"query": [
										{
											"key": "startone",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Items shown per page"
										}
									]
								},
								"description": "Returns data about all deal fields."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dealFields?start=0&limit=<integer>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dealFields"
											],
											"query": [
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"key\": \"title\",\n      \"name\": \"Title\",\n      \"order_nr\": 2,\n      \"field_type\": \"varchar\",\n      \"add_time\": \"2019-02-04 13:58:03\",\n      \"update_time\": \"2019-02-04 13:58:03\",\n      \"last_updated_by_user_id\": 1,\n      \"created_by_user_id\": 1,\n      \"active_flag\": true,\n      \"edit_flag\": false,\n      \"index_visible_flag\": true,\n      \"details_visible_flag\": true,\n      \"add_visible_flag\": true,\n      \"important_flag\": false,\n      \"bulk_edit_allowed\": true,\n      \"searchable_flag\": false,\n      \"filtering_allowed\": true,\n      \"sortable_flag\": true,\n      \"options\": null,\n      \"mandatory_flag\": true\n    },\n    {\n      \"id\": 2,\n      \"key\": \"9dc80c50d78a15643bfc4ca79d76156a73a1ca0e\",\n      \"name\": \"Customer Type\",\n      \"order_nr\": 1,\n      \"field_type\": \"enum\",\n      \"add_time\": \"2019-02-04 13:58:03\",\n      \"update_time\": \"2019-02-04 13:58:03\",\n      \"last_updated_by_user_id\": 1,\n      \"created_by_user_id\": 1,\n      \"active_flag\": true,\n      \"edit_flag\": true,\n      \"index_visible_flag\": true,\n      \"details_visible_flag\": true,\n      \"add_visible_flag\": false,\n      \"important_flag\": false,\n      \"bulk_edit_allowed\": true,\n      \"searchable_flag\": false,\n      \"filtering_allowed\": true,\n      \"sortable_flag\": true,\n      \"options\": [\n        {\n          \"id\": 190,\n          \"label\": \"Private person\"\n        },\n        {\n          \"id\": 191,\n          \"label\": \"Company\"\n        },\n        {\n          \"id\": 192,\n          \"label\": \"Government\"\n        }\n      ],\n      \"mandatory_flag\": true\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false\n    }\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Add a new dealField",
					"item": [
						{
							"name": "Add a new deal field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"// Confirming the status of resource creation on the server\r",
											"\r",
											"pm.test(\"status code is right\", \r",
											"function() {\r",
											"   pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validating the data type and properties of the response body\r",
											"pm.test(\"Data type and properties of response body are correct\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.id).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.key).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.name).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.group_id).to.be.null;\r",
											"    pm.expect(jsonData.data.order_nr).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.field_type).to.equal(\"enum\");\r",
											"    pm.expect(jsonData.data.json_column_flag).to.be.a(\"boolean\");\r",
											"    pm.test(\"add_time should be a valid timestamp\", function () {\r",
											"    pm.expect(jsonData.data).to.have.property(\"add_time\");  // Ensure the key exists\r",
											"    pm.expect(jsonData.data.add_time).to.be.a(\"string\");  // Ensure it's a string\r",
											"    pm.expect(Date.parse(jsonData.data.add_time)).to.be.a(\"number\"); // Ensure it's a valid timestamp\r",
											"});\r",
											"\r",
											"    pm.expect(jsonData.data.update_time).to.be.null;\r",
											"    pm.expect(jsonData.data.last_updated_by_user_id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.last_updated_by_user_id)).to.be.true;\r",
											"    pm.expect(jsonData.data.edit_flag).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.details_visible_flag).to.be.true;\r",
											"    pm.expect(jsonData.data.add_visible_flag).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.important_flag).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.bulk_edit_allowed).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.filtering_allowed).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.sortable_flag).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.mandatory_flag).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.searchable_flag).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.restriction_settings).to.be.an('array');\r",
											"    pm.expect(jsonData.data.user_restrictions).to.be.null;\r",
											"    pm.expect(jsonData.data.description).to.be.null;\r",
											"    pm.expect(jsonData.data.created_by_user_id).to.be.a(\"number\");\r",
											"    pm.expect(Number.isInteger(jsonData.data.created_by_user_id)).to.be.true;\r",
											"    pm.expect(jsonData.data.projects_detail_visible_flag).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.show_in_pipelines.show_in_all).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data.options).to.be.an('array');\r",
											"    pm.expect(jsonData.data.options).to.be.an('array');\r",
											"    pm.expect(jsonData.data.options[0].id).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.options[0].label).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.options[1].id).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.options[1].label).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data.options[2].id).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data.options[2].label).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"channeL1_name\",jsonData.data.options[0].label)\r",
											"pm.environment.get(\"channeL1_name\");\r",
											"\r",
											"pm.environment.set(\"channeL1_id\",jsonData.data.options[0].id)\r",
											"pm.environment.get(\"channeL1_id\");\r",
											"\r",
											"pm.environment.set(\"channeL2_name\",jsonData.data.options[1].label)\r",
											"pm.environment.get(\"channeL2_name\");\r",
											"\r",
											"pm.environment.set(\"channeL2_id\",jsonData.data.options[1].id)\r",
											"pm.environment.get(\"channeL2_id\");\r",
											"\r",
											"pm.environment.set(\"channeL3_name\",jsonData.data.options[2].label)\r",
											"pm.environment.get(\"channeL3_name\");\r",
											"\r",
											"pm.environment.set(\"channeL3_id\",jsonData.data.options[2].id)\r",
											"pm.environment.get(\"channeL3_id\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Validating the status code of the API response\r",
											"\r",
											"\r",
											"// Validating the response time\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"field_type\": \"enum\",\n  \"name\": \"Lead source\",\n  \"options\": [\n    \"web form\",\n    \"social_media\",\n    \"google ad\"\n  ],\n  \"add_visible_flag\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dealFields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dealFields"
									]
								},
								"description": "Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"field_type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"options\": [\n    \"<object>\",\n    \"<object>\"\n  ],\n  \"add_visible_flag\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/dealFields?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dealFields"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 2,\n    \"key\": \"9dc80c50d78a15643bfc4ca79d76156a73a1ca0e\",\n    \"name\": \"Customer Type\",\n    \"order_nr\": 1,\n    \"field_type\": \"enum\",\n    \"add_time\": \"2019-02-04 13:58:03\",\n    \"update_time\": \"2019-02-04 13:58:03\",\n    \"last_updated_by_user_id\": 1,\n    \"created_by_user_id\": 1,\n    \"active_flag\": true,\n    \"edit_flag\": true,\n    \"index_visible_flag\": true,\n    \"details_visible_flag\": true,\n    \"add_visible_flag\": false,\n    \"important_flag\": false,\n    \"bulk_edit_allowed\": true,\n    \"searchable_flag\": false,\n    \"filtering_allowed\": true,\n    \"sortable_flag\": true,\n    \"options\": [\n      {\n        \"id\": 190,\n        \"label\": \"Private person\"\n      },\n      {\n        \"id\": 191,\n        \"label\": \"Company\"\n      },\n      {\n        \"id\": 192,\n        \"label\": \"Government\"\n      }\n    ],\n    \"mandatory_flag\": true\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "LeadLabel",
			"item": [
				{
					"name": "Get leadLabels",
					"item": [
						{
							"name": "Get all lead labels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"leadLabel_id1\",\r",
											"jsonData.data[0].id);\r",
											"\r",
											"pm.environment.get(\"leadLabel_id\");\r",
											"\r",
											"pm.environment.set(\"leadLabel_id2\",\r",
											"jsonData.data[1].id);\r",
											"\r",
											"pm.environment.get(\"leadLabel_id2\");\r",
											"\r",
											"pm.environment.set(\"leadLabel_id3\",\r",
											"jsonData.data[2].id);\r",
											"\r",
											"pm.environment.get(\"leadLabel_id3\");\r",
											"\r",
											"//validating response structure\r",
											"pm.test(\"Validate response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"    \r",
											"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    let item = jsonData.data[0]; // Access the first object in the array\r",
											"\r",
											"    pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(item).to.have.property(\"name\").that.equals(\"Hot\");\r",
											"    pm.expect(item).to.have.property(\"color\").that.equals(\"red\");\r",
											"    \r",
											"    pm.expect(item).to.have.property(\"add_time\").that.is.a(\"string\");\r",
											"    pm.expect(item).to.have.property(\"update_time\").that.is.a(\"string\");\r",
											"\r",
											"    let addTime = new Date(item.add_time).getTime();\r",
											"    let updateTime = new Date(item.update_time).getTime();\r",
											"    \r",
											"    pm.expect(addTime).to.be.a(\"number\").that.is.not.NaN;\r",
											"    pm.expect(updateTime).to.be.a(\"number\").that.is.not.NaN;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//validating response structure\r",
											"pm.test(\"response body is in form of array\" ,function() {pm.expect(jsonData).to.be.an(\"object\")\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leadLabels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leadLabels"
									]
								},
								"description": "Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned."
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leadLabels?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leadLabels"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n      \"name\": \"Hot\",\n      \"color\": \"red\",\n      \"add_time\": \"2020-02-13T15:31:44.000Z\",\n      \"update_time\": \"2020-02-13T15:31:44.000Z\"\n    },\n    {\n      \"id\": \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\",\n      \"name\": \"Cold\",\n      \"color\": \"blue\",\n      \"add_time\": \"2020-02-13T15:31:44.000Z\",\n      \"update_time\": \"2020-02-13T15:31:44.000Z\"\n    },\n    {\n      \"id\": \"f08b69b0-4e75-11ea-9643-03698ef1cfd6\",\n      \"name\": \"Warm\",\n      \"color\": \"yellow\",\n      \"add_time\": \"2020-02-13T15:31:44.000Z\",\n      \"update_time\": \"2020-02-13T15:31:44.000Z\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all lead labels - authorised user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leadLabels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leadLabels"
									]
								},
								"description": "Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned."
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leadLabels?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leadLabels"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n      \"name\": \"Hot\",\n      \"color\": \"red\",\n      \"add_time\": \"2020-02-13T15:31:44.000Z\",\n      \"update_time\": \"2020-02-13T15:31:44.000Z\"\n    },\n    {\n      \"id\": \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\",\n      \"name\": \"Cold\",\n      \"color\": \"blue\",\n      \"add_time\": \"2020-02-13T15:31:44.000Z\",\n      \"update_time\": \"2020-02-13T15:31:44.000Z\"\n    },\n    {\n      \"id\": \"f08b69b0-4e75-11ea-9643-03698ef1cfd6\",\n      \"name\": \"Warm\",\n      \"color\": \"yellow\",\n      \"add_time\": \"2020-02-13T15:31:44.000Z\",\n      \"update_time\": \"2020-02-13T15:31:44.000Z\"\n    }\n  ]\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Lead",
			"item": [
				{
					"name": "add a lead",
					"item": [
						{
							"name": "Add a lead - positive test case",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_time = new Date();\r",
											"current_time.setDate(current_time.getDate() + 15);\r",
											"\r",
											"var futureDate = current_time.toISOString().split(\"T\")[0]; // Extract only YYYY-MM-DD\r",
											"pm.environment.set(\"expected_close_date\", futureDate);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"  pm.environment.set(\"lead_id\", jsonData.data.id);\r",
											"\r",
											"  pm.environment.get(\"lead_id\");\r",
											"\r",
											"  //setting variables\r",
											"   pm.environment.set(\"expected_close_date\", jsonData.data.expected_close_date);\r",
											"\r",
											"  pm.environment.get(\"expected_close_date\");\r",
											"\r",
											"  var jsonData = pm.response.json();\r",
											"\r",
											"  pm.test(\"Validate response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"    let item = jsonData.data;\r",
											"\r",
											"    pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(item).to.have.property(\"title\").that.equals(\"Paint and sip boards\");\r",
											"    pm.expect(item).to.have.property(\"owner_id\").that.is.a(\"number\");\r",
											"    pm.expect(item).to.have.property(\"creator_id\").that.is.a(\"number\");\r",
											"    pm.expect(item).to.have.property(\"label_ids\").that.is.an(\"array\").that.is.empty;\r",
											"    \r",
											"    pm.expect(item).to.have.property(\"value\").that.is.an(\"object\");\r",
											"    pm.expect(item.value).to.have.property(\"amount\").that.is.a(\"number\").and.equals(1500000);\r",
											"    pm.expect(item.value).to.have.property(\"currency\").that.equals(\"NGN\");\r",
											"\r",
											"    pm.expect(item).to.have.property(\"expected_close_date\").that.is.a(\"string\");\r",
											"    pm.expect(item).to.have.property(\"person_id\").that.is.a(\"number\");\r",
											"    pm.expect(item).to.have.property(\"organization_id\").that.is.a(\"number\");\r",
											"    pm.expect(item).to.have.property(\"is_archived\").that.is.a(\"boolean\").and.equals(false);\r",
											"    pm.expect(item).to.have.property(\"archive_time\").that.is.null;\r",
											"\r",
											"    pm.expect(item).to.have.property(\"source_name\").that.equals(\"API\");\r",
											"    pm.expect(item).to.have.property(\"origin\").that.equals(\"API\");\r",
											"    pm.expect(item).to.have.property(\"origin_id\").that.equals(\"whatsapp_status\");\r",
											"    \r",
											"    pm.expect(item).to.have.property(\"channel\").that.is.null;\r",
											"    pm.expect(item).to.have.property(\"channel_id\").that.is.null;\r",
											"    pm.expect(item).to.have.property(\"was_seen\").that.is.a(\"boolean\").and.equals(false);\r",
											"    \r",
											"    pm.expect(item).to.have.property(\"next_activity_id\").that.is.null;\r",
											"    pm.expect(item).to.have.property(\"add_time\").that.is.a(\"string\");\r",
											"    pm.expect(item).to.have.property(\"update_time\").that.is.a(\"string\");\r",
											"    \r",
											"    pm.expect(item).to.have.property(\"visible_to\").that.equals(\"3\");\r",
											"    pm.expect(item).to.have.property(\"cc_email\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n\n  \"title\": \"Paint and sip boards\",\n  \"owner_id\": {{user_id}},\n  /*\"label_ids\": [\n    \"\",\n    \"\"\n  ],  */\n  \"person_id\": {{person_id_1}},\n  \"organization_id\": {{organization_id_1}},\n  \"value\": {\n    \"amount\": 1500000, //number\n    \"currency\": \"{{NIGERIA_CURR}}\"\n  },\n  \"expected_close_date\": \"{{expected_close_date}}\",\n  \"visible_to\": \"3\",\n  \"was_seen\": false,\n  \"origin_id\": \"whatsapp_status\"/*,\n   \"channel\": {{channeL1_id}},\n  \"channel_id\": \"<string>\" */\n}\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/leads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads"
									]
								},
								"description": "Creates a lead. A lead always has to be linked to a person or an organization or both. All leads created through the Pipedrive API will have a lead source and origin set to `API`. Here's the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-lead\" target=\"_blank\" rel=\"noopener noreferrer\">adding a lead</a>. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals. See an example given in the <a href=\"https://pipedrive.readme.io/docs/updating-custom-field-value\" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields' values tutorial</a>."
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label_ids\": [\n    \"<uuid>\",\n    \"<uuid>\"\n  ],\n  \"person_id\": \"<integer>\",\n  \"organization_id\": \"<integer>\",\n  \"value\": {\n    \"amount\": \"<number>\",\n    \"currency\": \"<string>\"\n  },\n  \"expected_close_date\": \"<date>\",\n  \"visible_to\": \"<string>\",\n  \"was_seen\": \"<boolean>\",\n  \"origin_id\": \"<string>\",\n  \"channel\": \"<integer>\",\n  \"channel_id\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/leads?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n    \"title\": \"Jane Doe Lead\",\n    \"owner_id\": 1,\n    \"creator_id\": 1,\n    \"label_ids\": [\n      \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n      \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n    ],\n    \"person_id\": 1092,\n    \"organization_id\": null,\n    \"source_name\": \"API\",\n    \"origin\": \"API\",\n    \"origin_id\": null,\n    \"channel\": 52,\n    \"channel_id\": \"Jun23 Billboards\",\n    \"is_archived\": false,\n    \"was_seen\": false,\n    \"value\": {\n      \"amount\": 999,\n      \"currency\": \"USD\"\n    },\n    \"expected_close_date\": null,\n    \"next_activity_id\": 1,\n    \"add_time\": \"2020-10-14T11:30:36.551Z\",\n    \"update_time\": \"2020-10-14T11:30:36.551Z\",\n    \"visible_to\": \"3\",\n    \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a lead - positive test case Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_time = new Date();\r",
											"current_time.setDate(current_time.getDate() + 15);\r",
											"\r",
											"var futureDate = current_time.toISOString().split(\"T\")[0]; // Extract only YYYY-MM-DD\r",
											"pm.environment.set(\"expected_close_date\", futureDate);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"  //setting variables\r",
											"   pm.environment.set(\"expected_close_date\", jsonData.data.expected_close_date);\r",
											"\r",
											"  pm.environment.get(\"expected_close_date\");\r",
											"\r",
											"  var jsonData = pm.response.json();\r",
											"\r",
											"  pm.test(\"Validate response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"\r",
											"    let item = jsonData.data;\r",
											"\r",
											"    pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(item).to.have.property(\"title\").that.equals(\"Paint and sip boards\");\r",
											"    pm.expect(item).to.have.property(\"owner_id\").that.is.a(\"number\");\r",
											"    pm.expect(item).to.have.property(\"creator_id\").that.is.a(\"number\");\r",
											"    pm.expect(item).to.have.property(\"label_ids\").that.is.an(\"array\").that.is.empty;\r",
											"    \r",
											"    pm.expect(item).to.have.property(\"value\").that.is.an(\"object\");\r",
											"    pm.expect(item.value).to.have.property(\"amount\").that.is.a(\"number\").and.equals(1500000);\r",
											"    pm.expect(item.value).to.have.property(\"currency\").that.equals(\"NGN\");\r",
											"\r",
											"    pm.expect(item).to.have.property(\"expected_close_date\").that.is.a(\"string\");\r",
											"    pm.expect(item).to.have.property(\"person_id\").that.is.a(\"number\");\r",
											"    pm.expect(item).to.have.property(\"organization_id\").that.is.a(\"number\");\r",
											"    pm.expect(item).to.have.property(\"is_archived\").that.is.a(\"boolean\").and.equals(false);\r",
											"    pm.expect(item).to.have.property(\"archive_time\").that.is.null;\r",
											"\r",
											"    pm.expect(item).to.have.property(\"source_name\").that.equals(\"API\");\r",
											"    pm.expect(item).to.have.property(\"origin\").that.equals(\"API\");\r",
											"    pm.expect(item).to.have.property(\"origin_id\").that.equals(\"whatsapp_status\");\r",
											"    \r",
											"    pm.expect(item).to.have.property(\"channel\").that.is.null;\r",
											"    pm.expect(item).to.have.property(\"channel_id\").that.is.null;\r",
											"    pm.expect(item).to.have.property(\"was_seen\").that.is.a(\"boolean\").and.equals(false);\r",
											"    \r",
											"    pm.expect(item).to.have.property(\"next_activity_id\").that.is.null;\r",
											"    pm.expect(item).to.have.property(\"add_time\").that.is.a(\"string\");\r",
											"    pm.expect(item).to.have.property(\"update_time\").that.is.a(\"string\");\r",
											"    \r",
											"    pm.expect(item).to.have.property(\"visible_to\").that.equals(\"3\");\r",
											"    pm.expect(item).to.have.property(\"cc_email\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"{{$randomProductName}}\",\n  \"owner_id\": {{user_id}},\n  /*\"label_ids\": [\n    \"\",\n    \"\"\n  ],  */\n  \"person_id\": {{person_id_1}},\n  \"organization_id\": {{organization_id_1}},\n  \"value\": {\n    \"amount\": 1500000, //number\n    \"currency\": \"{{NIGERIA_CURR}}\"\n  },\n  \"expected_close_date\": \"{{expected_close_date}}\",\n  \"visible_to\": \"3\",\n  \"was_seen\": false,\n  \"origin_id\": \"whatsapp_status\"/*,\n   \"channel\": {{channeL1_id}},\n  \"channel_id\": \"<string>\" */\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/leads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads"
									]
								},
								"description": "Creates a lead. A lead always has to be linked to a person or an organization or both. All leads created through the Pipedrive API will have a lead source and origin set to `API`. Here's the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-lead\" target=\"_blank\" rel=\"noopener noreferrer\">adding a lead</a>. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals. See an example given in the <a href=\"https://pipedrive.readme.io/docs/updating-custom-field-value\" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields' values tutorial</a>."
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label_ids\": [\n    \"<uuid>\",\n    \"<uuid>\"\n  ],\n  \"person_id\": \"<integer>\",\n  \"organization_id\": \"<integer>\",\n  \"value\": {\n    \"amount\": \"<number>\",\n    \"currency\": \"<string>\"\n  },\n  \"expected_close_date\": \"<date>\",\n  \"visible_to\": \"<string>\",\n  \"was_seen\": \"<boolean>\",\n  \"origin_id\": \"<string>\",\n  \"channel\": \"<integer>\",\n  \"channel_id\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/leads?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n    \"title\": \"Jane Doe Lead\",\n    \"owner_id\": 1,\n    \"creator_id\": 1,\n    \"label_ids\": [\n      \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n      \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n    ],\n    \"person_id\": 1092,\n    \"organization_id\": null,\n    \"source_name\": \"API\",\n    \"origin\": \"API\",\n    \"origin_id\": null,\n    \"channel\": 52,\n    \"channel_id\": \"Jun23 Billboards\",\n    \"is_archived\": false,\n    \"was_seen\": false,\n    \"value\": {\n      \"amount\": 999,\n      \"currency\": \"USD\"\n    },\n    \"expected_close_date\": null,\n    \"next_activity_id\": 1,\n    \"add_time\": \"2020-10-14T11:30:36.551Z\",\n    \"update_time\": \"2020-10-14T11:30:36.551Z\",\n    \"visible_to\": \"3\",\n    \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a lead - unauthorised user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_time = new Date();\r",
											"current_time.setDate(current_time.getDate() + 15);\r",
											"\r",
											"var futureDate = current_time.toISOString().split(\"T\")[0]; // Extract only YYYY-MM-DD\r",
											"pm.environment.set(\"expected_close_date\", futureDate);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Paint and sip boards\",\n  \"owner_id\": {{user_id}},\n  /*\"label_ids\": [\n    \"\",\n    \"\"\n  ],  */\n  \"person_id\": {{person_id_1}},\n  \"organization_id\": {{organization_id_1}},\n  \"value\": {\n    \"amount\": 1500000, //number\n    \"currency\": \"{{NIGERIA_CURR}}\"\n  },\n  \"expected_close_date\": \"{{expected_close_date}}\",\n  \"visible_to\": \"3\",\n  \"was_seen\": false,\n  \"origin_id\": \"whatsapp_status\"/*,\n   \"channel\": {{channeL1_id}},\n  \"channel_id\": \"<string>\" */\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/leads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads"
									]
								},
								"description": "Creates a lead. A lead always has to be linked to a person or an organization or both. All leads created through the Pipedrive API will have a lead source and origin set to `API`. Here's the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-lead\" target=\"_blank\" rel=\"noopener noreferrer\">adding a lead</a>. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals. See an example given in the <a href=\"https://pipedrive.readme.io/docs/updating-custom-field-value\" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields' values tutorial</a>."
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label_ids\": [\n    \"<uuid>\",\n    \"<uuid>\"\n  ],\n  \"person_id\": \"<integer>\",\n  \"organization_id\": \"<integer>\",\n  \"value\": {\n    \"amount\": \"<number>\",\n    \"currency\": \"<string>\"\n  },\n  \"expected_close_date\": \"<date>\",\n  \"visible_to\": \"<string>\",\n  \"was_seen\": \"<boolean>\",\n  \"origin_id\": \"<string>\",\n  \"channel\": \"<integer>\",\n  \"channel_id\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/leads?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n    \"title\": \"Jane Doe Lead\",\n    \"owner_id\": 1,\n    \"creator_id\": 1,\n    \"label_ids\": [\n      \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n      \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n    ],\n    \"person_id\": 1092,\n    \"organization_id\": null,\n    \"source_name\": \"API\",\n    \"origin\": \"API\",\n    \"origin_id\": null,\n    \"channel\": 52,\n    \"channel_id\": \"Jun23 Billboards\",\n    \"is_archived\": false,\n    \"was_seen\": false,\n    \"value\": {\n      \"amount\": 999,\n      \"currency\": \"USD\"\n    },\n    \"expected_close_date\": null,\n    \"next_activity_id\": 1,\n    \"add_time\": \"2020-10-14T11:30:36.551Z\",\n    \"update_time\": \"2020-10-14T11:30:36.551Z\",\n    \"visible_to\": \"3\",\n    \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a lead - invalid user_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_time = new Date();\r",
											"current_time.setDate(current_time.getDate() + 15);\r",
											"\r",
											"var futureDate = current_time.toISOString().split(\"T\")[0]; // Extract only YYYY-MM-DD\r",
											"pm.environment.set(\"expected_close_date\", futureDate);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"\r",
											" \r",
											"\r",
											" pm.test(\"Validate error response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;\r",
											"    pm.expect(jsonData).to.have.property(\"additional_data\").that.is.null;\r",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"error_info\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.error).to.equal(\"provided dataset is not valid\");\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Specified lead owner not found\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Paint and sip boards\",\n  \"owner_id\": {{UserID_1}},\n  /*\"label_ids\": [\n    \"\",\n    \"\"\n  ],  */\n  \"person_id\": {{person_id_1}},\n  \"organization_id\": {{organization_id_1}},\n  \"value\": {\n    \"amount\": 1500000, //number\n    \"currency\": \"{{NIGERIA_CURR}}\"\n  },\n  \"expected_close_date\": \"{{expected_close_date}}\",\n  \"visible_to\": \"3\",\n  \"was_seen\": false,\n  \"origin_id\": \"whatsapp_status\"/*,\n   \"channel\": {{channeL1_id}},\n  \"channel_id\": \"<string>\" */\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/leads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads"
									]
								},
								"description": "Creates a lead. A lead always has to be linked to a person or an organization or both. All leads created through the Pipedrive API will have a lead source and origin set to `API`. Here's the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-lead\" target=\"_blank\" rel=\"noopener noreferrer\">adding a lead</a>. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals. See an example given in the <a href=\"https://pipedrive.readme.io/docs/updating-custom-field-value\" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields' values tutorial</a>."
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"owner_id\": \"<integer>\",\n  \"label_ids\": [\n    \"<uuid>\",\n    \"<uuid>\"\n  ],\n  \"person_id\": \"<integer>\",\n  \"organization_id\": \"<integer>\",\n  \"value\": {\n    \"amount\": \"<number>\",\n    \"currency\": \"<string>\"\n  },\n  \"expected_close_date\": \"<date>\",\n  \"visible_to\": \"<string>\",\n  \"was_seen\": \"<boolean>\",\n  \"origin_id\": \"<string>\",\n  \"channel\": \"<integer>\",\n  \"channel_id\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/leads?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n    \"title\": \"Jane Doe Lead\",\n    \"owner_id\": 1,\n    \"creator_id\": 1,\n    \"label_ids\": [\n      \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n      \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n    ],\n    \"person_id\": 1092,\n    \"organization_id\": null,\n    \"source_name\": \"API\",\n    \"origin\": \"API\",\n    \"origin_id\": null,\n    \"channel\": 52,\n    \"channel_id\": \"Jun23 Billboards\",\n    \"is_archived\": false,\n    \"was_seen\": false,\n    \"value\": {\n      \"amount\": 999,\n      \"currency\": \"USD\"\n    },\n    \"expected_close_date\": null,\n    \"next_activity_id\": 1,\n    \"add_time\": \"2020-10-14T11:30:36.551Z\",\n    \"update_time\": \"2020-10-14T11:30:36.551Z\",\n    \"visible_to\": \"3\",\n    \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "get one lead",
					"item": [
						{
							"name": "Get one lead",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Set environment variable for lead_id\r",
											"pm.environment.set(\"lead_id\", jsonData.data.id);\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
											"\r",
											"    pm.expect(jsonData.data).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"title\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"owner_id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"creator_id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"label_ids\").that.is.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.data).to.have.property(\"value\").that.is.an(\"object\");\r",
											"    pm.expect(jsonData.data.value).to.have.property(\"amount\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data.value).to.have.property(\"currency\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.data).to.have.property(\"expected_close_date\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"person_id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"organization_id\").that.is.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.data).to.have.property(\"is_archived\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"archive_time\").that.is.null;\r",
											"    pm.expect(jsonData.data).to.have.property(\"source_name\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"origin\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"origin_id\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(jsonData.data).to.have.property(\"channel\").that.is.null;\r",
											"    pm.expect(jsonData.data).to.have.property(\"channel_id\").that.is.null;\r",
											"    pm.expect(jsonData.data).to.have.property(\"was_seen\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"next_activity_id\").that.is.null;\r",
											"    pm.expect(jsonData.data).to.have.property(\"add_time\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"update_time\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"visible_to\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"cc_email\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leads/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lead_id}}",
											"description": "(Required) The ID of the lead"
										}
									]
								},
								"description": "Returns details of a specific lead. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields’ structure from deals."
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leads/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<uuid>",
													"description": "(Required) The ID of the lead"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n    \"title\": \"Jane Doe Lead\",\n    \"owner_id\": 1,\n    \"creator_id\": 1,\n    \"label_ids\": [\n      \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n      \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n    ],\n    \"person_id\": 1092,\n    \"organization_id\": null,\n    \"source_name\": \"API\",\n    \"origin\": \"API\",\n    \"origin_id\": null,\n    \"channel\": 52,\n    \"channel_id\": \"Jun23 Billboards\",\n    \"is_archived\": false,\n    \"was_seen\": false,\n    \"value\": {\n      \"amount\": 999,\n      \"currency\": \"USD\"\n    },\n    \"expected_close_date\": null,\n    \"next_activity_id\": 1,\n    \"add_time\": \"2020-10-14T11:30:36.551Z\",\n    \"update_time\": \"2020-10-14T11:30:36.551Z\",\n    \"visible_to\": \"3\",\n    \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n  }\n}"
								},
								{
									"name": "A resource describing an error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leads/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<uuid>",
													"description": "(Required) The ID of the lead"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"requested lead not found\",\n  \"error_info\": \"Object was not found.\",\n  \"data\": null,\n  \"additional_data\": null\n}"
								}
							]
						},
						{
							"name": "Get one lead - unautorised_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leads/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lead_id}}",
											"description": "(Required) The ID of the lead"
										}
									]
								},
								"description": "Returns details of a specific lead. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields’ structure from deals."
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leads/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<uuid>",
													"description": "(Required) The ID of the lead"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n    \"title\": \"Jane Doe Lead\",\n    \"owner_id\": 1,\n    \"creator_id\": 1,\n    \"label_ids\": [\n      \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n      \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n    ],\n    \"person_id\": 1092,\n    \"organization_id\": null,\n    \"source_name\": \"API\",\n    \"origin\": \"API\",\n    \"origin_id\": null,\n    \"channel\": 52,\n    \"channel_id\": \"Jun23 Billboards\",\n    \"is_archived\": false,\n    \"was_seen\": false,\n    \"value\": {\n      \"amount\": 999,\n      \"currency\": \"USD\"\n    },\n    \"expected_close_date\": null,\n    \"next_activity_id\": 1,\n    \"add_time\": \"2020-10-14T11:30:36.551Z\",\n    \"update_time\": \"2020-10-14T11:30:36.551Z\",\n    \"visible_to\": \"3\",\n    \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n  }\n}"
								},
								{
									"name": "A resource describing an error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leads/:id?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads",
												":id"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<uuid>",
													"description": "(Required) The ID of the lead"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": false,\n  \"error\": \"requested lead not found\",\n  \"error_info\": \"Object was not found.\",\n  \"data\": null,\n  \"additional_data\": null\n}"
								}
							]
						}
					]
				},
				{
					"name": "get all leads",
					"item": [
						{
							"name": "Get all leads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Get user ID and convert to a number\r",
											"let userId = Number(pm.variables.get(\"user_id\"));\r",
											"\r",
											"// Parse response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.expect(jsonData).to.have.property(\"success\", true);\r",
											"pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\").that.is.not.empty;\r",
											"\r",
											"// Filter the deals where owner_id matches userId\r",
											"let filteredDeals = jsonData.data.filter(deal => deal.owner_id === userId);\r",
											"\r",
											"// Ensure all deals in the response have the correct owner_id\r",
											"pm.test(\"No other owner_id exists in response\", function () {\r",
											"    jsonData.data.forEach(deal => {\r",
											"        pm.expect(deal).to.have.property(\"owner_id\", userId);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Ensure at least one matching deal exists\r",
											"pm.test(\"At least one deal exists with owner_id: \" + userId, function () {\r",
											"    pm.expect(filteredDeals.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"// Validate response body structure (using the first filtered deal)\r",
											"let deal = filteredDeals[0];\r",
											"pm.test(\"Valid response body and structure\", function() {\r",
											"    pm.expect(deal).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(deal).to.have.property(\"title\").that.is.a(\"string\");\r",
											"    pm.expect(deal).to.have.property(\"owner_id\").that.is.a(\"number\");\r",
											"    pm.expect(deal).to.have.property(\"creator_id\").that.is.a(\"number\");\r",
											"    pm.expect(deal).to.have.property(\"label_ids\").that.is.an(\"array\");\r",
											"    pm.expect(deal).to.have.property(\"value\").that.is.an(\"object\");\r",
											"    pm.expect(deal.value).to.have.property(\"amount\").that.is.a(\"number\");\r",
											"    pm.expect(deal.value).to.have.property(\"currency\").that.equals(\"NGN\");\r",
											"    pm.expect(deal).to.have.property(\"expected_close_date\").that.is.a(\"string\");\r",
											"    pm.expect(deal).to.have.property(\"person_id\").that.is.a(\"number\");\r",
											"    pm.expect(deal).to.have.property(\"organization_id\").that.is.a(\"number\");\r",
											"    pm.expect(deal).to.have.property(\"is_archived\").that.is.a(\"boolean\");\r",
											"    pm.expect(deal).to.have.property(\"archive_time\").that.is.null;\r",
											"    pm.expect(deal).to.have.property(\"source_name\").that.equals(\"API\");\r",
											"    pm.expect(deal).to.have.property(\"origin\").that.equals(\"API\");\r",
											"    pm.expect(deal).to.have.property(\"origin_id\").that.equals(\"whatsapp_status\");\r",
											"    pm.expect(deal).to.have.property(\"channel\").that.is.null;\r",
											"    pm.expect(deal).to.have.property(\"channel_id\").that.is.null;\r",
											"    pm.expect(deal).to.have.property(\"was_seen\").that.is.a(\"boolean\");\r",
											"    pm.expect(deal).to.have.property(\"next_activity_id\").that.is.null;\r",
											"    pm.expect(deal).to.have.property(\"add_time\").that.is.a(\"string\");\r",
											"    pm.expect(deal).to.have.property(\"update_time\").that.is.a(\"string\");\r",
											"    pm.expect(deal).to.have.property(\"visible_to\").that.is.a(\"string\");\r",
											"    pm.expect(deal).to.have.property(\"cc_email\").that.contains(\"@pipedrivemail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leads?owner_id={{user_id}}&sort=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads"
									],
									"query": [
										{
											"key": "archived_status",
											"value": "<string>",
											"description": "Filtering based on the archived status of a lead. If not provided, `All` is used.",
											"disabled": true
										},
										{
											"key": "owner_id",
											"value": "{{user_id}}",
											"description": "If supplied, only leads matching the given user will be returned. However, `filter_id` takes precedence over `owner_id` when supplied."
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys)."
										}
									]
								},
								"description": "Returns multiple leads. Leads are sorted by the time they were created, from oldest to newest. Pagination can be controlled using `limit` and `start` query parameters. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals.\n"
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leads?limit=100&start=0&archived_status=<string>&owner_id=1&person_id=1&organization_id=1&filter_id=1&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "archived_status",
													"value": "<string>"
												},
												{
													"key": "owner_id",
													"value": "1"
												},
												{
													"key": "person_id",
													"value": "1"
												},
												{
													"key": "organization_id",
													"value": "1"
												},
												{
													"key": "filter_id",
													"value": "1"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n      \"title\": \"Jane Doe Lead\",\n      \"owner_id\": 1,\n      \"creator_id\": 1,\n      \"label_ids\": [\n        \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n        \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n      ],\n      \"person_id\": 1092,\n      \"organization_id\": null,\n      \"source_name\": \"API\",\n      \"origin\": \"API\",\n      \"origin_id\": null,\n      \"channel\": 52,\n      \"channel_id\": \"Jun23 Billboards\",\n      \"is_archived\": false,\n      \"was_seen\": false,\n      \"value\": {\n        \"amount\": 999,\n        \"currency\": \"USD\"\n      },\n      \"expected_close_date\": null,\n      \"next_activity_id\": 1,\n      \"add_time\": \"2020-10-14T11:30:36.551Z\",\n      \"update_time\": \"2020-10-14T11:30:36.551Z\",\n      \"visible_to\": \"3\",\n      \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all leads - invalid query param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"valid responsebody structure\" ,function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\")\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\")\r",
											"});\r",
											"\r",
											"pm.test(\"valid responsebody message\" ,function() {\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"   \r",
											"    pm.expect(jsonData.error).to.include(\"provided dataset is not valid\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.include(\"owner_id\\\" must be a number\")\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leads?owner_id=abc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads"
									],
									"query": [
										{
											"key": "archived_status",
											"value": "<string>",
											"description": "Filtering based on the archived status of a lead. If not provided, `All` is used.",
											"disabled": true
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).",
											"disabled": true
										},
										{
											"key": "owner_id",
											"value": "abc"
										}
									]
								},
								"description": "Returns multiple leads. Leads are sorted by the time they were created, from oldest to newest. Pagination can be controlled using `limit` and `start` query parameters. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals.\n"
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leads?limit=100&start=0&archived_status=<string>&owner_id=1&person_id=1&organization_id=1&filter_id=1&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "archived_status",
													"value": "<string>"
												},
												{
													"key": "owner_id",
													"value": "1"
												},
												{
													"key": "person_id",
													"value": "1"
												},
												{
													"key": "organization_id",
													"value": "1"
												},
												{
													"key": "filter_id",
													"value": "1"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n      \"title\": \"Jane Doe Lead\",\n      \"owner_id\": 1,\n      \"creator_id\": 1,\n      \"label_ids\": [\n        \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n        \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n      ],\n      \"person_id\": 1092,\n      \"organization_id\": null,\n      \"source_name\": \"API\",\n      \"origin\": \"API\",\n      \"origin_id\": null,\n      \"channel\": 52,\n      \"channel_id\": \"Jun23 Billboards\",\n      \"is_archived\": false,\n      \"was_seen\": false,\n      \"value\": {\n        \"amount\": 999,\n        \"currency\": \"USD\"\n      },\n      \"expected_close_date\": null,\n      \"next_activity_id\": 1,\n      \"add_time\": \"2020-10-14T11:30:36.551Z\",\n      \"update_time\": \"2020-10-14T11:30:36.551Z\",\n      \"visible_to\": \"3\",\n      \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all leads - invalid sorting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"valid responsebody structure\" ,function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\")\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\")\r",
											"});\r",
											"\r",
											"pm.test(\"valid responsebody message\" ,function() {\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"   \r",
											"    pm.expect(jsonData.error).to.include(\"provided dataset is not valid\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.include(\"\\\"name DESC\\\" is not a valid column\")\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leads?sort=name DESC&owner_id=abc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads"
									],
									"query": [
										{
											"key": "archived_status",
											"value": "<string>",
											"description": "Filtering based on the archived status of a lead. If not provided, `All` is used.",
											"disabled": true
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name DESC",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys)."
										},
										{
											"key": "owner_id",
											"value": "abc"
										}
									]
								},
								"description": "Returns multiple leads. Leads are sorted by the time they were created, from oldest to newest. Pagination can be controlled using `limit` and `start` query parameters. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals.\n"
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leads?limit=100&start=0&archived_status=<string>&owner_id=1&person_id=1&organization_id=1&filter_id=1&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "archived_status",
													"value": "<string>"
												},
												{
													"key": "owner_id",
													"value": "1"
												},
												{
													"key": "person_id",
													"value": "1"
												},
												{
													"key": "organization_id",
													"value": "1"
												},
												{
													"key": "filter_id",
													"value": "1"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n      \"title\": \"Jane Doe Lead\",\n      \"owner_id\": 1,\n      \"creator_id\": 1,\n      \"label_ids\": [\n        \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n        \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n      ],\n      \"person_id\": 1092,\n      \"organization_id\": null,\n      \"source_name\": \"API\",\n      \"origin\": \"API\",\n      \"origin_id\": null,\n      \"channel\": 52,\n      \"channel_id\": \"Jun23 Billboards\",\n      \"is_archived\": false,\n      \"was_seen\": false,\n      \"value\": {\n        \"amount\": 999,\n        \"currency\": \"USD\"\n      },\n      \"expected_close_date\": null,\n      \"next_activity_id\": 1,\n      \"add_time\": \"2020-10-14T11:30:36.551Z\",\n      \"update_time\": \"2020-10-14T11:30:36.551Z\",\n      \"visible_to\": \"3\",\n      \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all leads - unauthorised user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content_type is not missing\", function() {\r",
											"    let Content_type =  pm.response.headers.get(\"content-type\");\r",
											"  pm.expect(Content_type) .to.not.be.undefined;\r",
											"});\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/leads?owner_id=abc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"leads"
									],
									"query": [
										{
											"key": "archived_status",
											"value": "<string>",
											"description": "Filtering based on the archived status of a lead. If not provided, `All` is used.",
											"disabled": true
										},
										{
											"key": "filter_id",
											"value": "<integer>",
											"description": "The ID of the filter to use",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "",
											"description": "The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).",
											"disabled": true
										},
										{
											"key": "owner_id",
											"value": "abc"
										}
									]
								},
								"description": "Returns multiple leads. Leads are sorted by the time they were created, from oldest to newest. Pagination can be controlled using `limit` and `start` query parameters. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals.\n"
							},
							"response": [
								{
									"name": "Successful response containing payload in the `data` field",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/leads?limit=100&start=0&archived_status=<string>&owner_id=1&person_id=1&organization_id=1&filter_id=1&sort=<string>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"leads"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "archived_status",
													"value": "<string>"
												},
												{
													"key": "owner_id",
													"value": "1"
												},
												{
													"key": "person_id",
													"value": "1"
												},
												{
													"key": "organization_id",
													"value": "1"
												},
												{
													"key": "filter_id",
													"value": "1"
												},
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"adf21080-0e10-11eb-879b-05d71fb426ec\",\n      \"title\": \"Jane Doe Lead\",\n      \"owner_id\": 1,\n      \"creator_id\": 1,\n      \"label_ids\": [\n        \"f08b42a0-4e75-11ea-9643-03698ef1cfd6\",\n        \"f08b42a1-4e75-11ea-9643-03698ef1cfd6\"\n      ],\n      \"person_id\": 1092,\n      \"organization_id\": null,\n      \"source_name\": \"API\",\n      \"origin\": \"API\",\n      \"origin_id\": null,\n      \"channel\": 52,\n      \"channel_id\": \"Jun23 Billboards\",\n      \"is_archived\": false,\n      \"was_seen\": false,\n      \"value\": {\n        \"amount\": 999,\n        \"currency\": \"USD\"\n      },\n      \"expected_close_date\": null,\n      \"next_activity_id\": 1,\n      \"add_time\": \"2020-10-14T11:30:36.551Z\",\n      \"update_time\": \"2020-10-14T11:30:36.551Z\",\n      \"visible_to\": \"3\",\n      \"cc_email\": \"company+1+leadntPaYKA5QRxXkh6WMNHiGh@dev.pipedrivemail.com\"\n    }\n  ]\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Pipelines",
			"item": [
				{
					"name": "Create pipelines",
					"item": [
						{
							"name": "Add a new pipeline",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
											"\r",
											"    pm.expect(jsonData.data).to.have.property(\"id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"url_title\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"order_nr\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"active\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"deal_probability\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"add_time\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"update_time\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set (\"pipelineID_1\",\r",
											"jsonData.data.id);\r",
											"\r",
											"pm.environment.get(\"pipelineID_1\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Sales pipeline\",\n  \"deal_probability\": 80,\n  \"order_nr\": 3,\n  \"active\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pipelines",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pipelines"
									]
								},
								"description": "Adds a new pipeline."
							},
							"response": [
								{
									"name": "Add pipeline",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"deal_probability\": \"<number>\",\n  \"order_nr\": \"<integer>\",\n  \"active\": \"<number>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pipelines?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pipelines"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Pipeline\",\n    \"url_title\": \"Pipeline\",\n    \"order_nr\": 1,\n    \"active\": true,\n    \"deal_probability\": true,\n    \"add_time\": \"2017-08-03 12:51:18\",\n    \"update_time\": \"2020-03-23 13:15:25\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a new pipeline invalid datatype",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"valid responsebody structure\" ,function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\")\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\")\r",
											"});\r",
											"\r",
											"pm.test(\"valid responsebody message\" ,function() {\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"   \r",
											"    pm.expect(jsonData.error).to.include(\"Name must be given\");\r",
											"\r",
											"    pm.expect(jsonData.error_info).to.include(\"Please check developers.pipedrive.com\")\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n  \"deal_probability\": 80,\n  \"order_nr\": 3,\n  \"active\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pipelines",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pipelines"
									]
								},
								"description": "Adds a new pipeline."
							},
							"response": [
								{
									"name": "Add pipeline",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"deal_probability\": \"<number>\",\n  \"order_nr\": \"<integer>\",\n  \"active\": \"<number>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pipelines?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pipelines"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Pipeline\",\n    \"url_title\": \"Pipeline\",\n    \"order_nr\": 1,\n    \"active\": true,\n    \"deal_probability\": true,\n    \"add_time\": \"2017-08-03 12:51:18\",\n    \"update_time\": \"2020-03-23 13:15:25\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a new pipeline invalid datatype",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
											"\r",
											"    pm.expect(jsonData.data).to.have.property(\"id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"url_title\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"order_nr\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"active\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"deal_probability\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"add_time\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"update_time\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{$randomCatchPhrase}}\",\n  \"deal_probability\": 80,\n  \"order_nr\": 3,\n  \"active\": true //integer\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pipelines",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pipelines"
									]
								},
								"description": "Adds a new pipeline."
							},
							"response": [
								{
									"name": "Add pipeline",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"deal_probability\": \"<number>\",\n  \"order_nr\": \"<integer>\",\n  \"active\": \"<number>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pipelines?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pipelines"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Pipeline\",\n    \"url_title\": \"Pipeline\",\n    \"order_nr\": 1,\n    \"active\": true,\n    \"deal_probability\": true,\n    \"add_time\": \"2017-08-03 12:51:18\",\n    \"update_time\": \"2020-03-23 13:15:25\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a new pipeline - unauthorised_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Sales pipeline\",\n  \"deal_probability\": 80,\n  \"order_nr\": 3,\n  \"active\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pipelines",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pipelines"
									]
								},
								"description": "Adds a new pipeline."
							},
							"response": [
								{
									"name": "Add pipeline",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"deal_probability\": \"<number>\",\n  \"order_nr\": \"<integer>\",\n  \"active\": \"<number>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pipelines?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pipelines"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Pipeline\",\n    \"url_title\": \"Pipeline\",\n    \"order_nr\": 1,\n    \"active\": true,\n    \"deal_probability\": true,\n    \"add_time\": \"2017-08-03 12:51:18\",\n    \"update_time\": \"2020-03-23 13:15:25\"\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Get all pipelines",
					"item": [
						{
							"name": "Get all pipelines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
											"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"url_title\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"order_nr\").that.is.a(\"number\");\r",
											"        pm.expect(item).to.have.property(\"active\").that.is.a(\"boolean\");\r",
											"        pm.expect(item).to.have.property(\"deal_probability\").that.is.a(\"boolean\");\r",
											"        pm.expect(item).to.have.property(\"add_time\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"update_time\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"selected\").that.is.a(\"boolean\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pipelines",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pipelines"
									]
								},
								"description": "Returns data about all pipelines."
							},
							"response": [
								{
									"name": "Get all pipelines",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pipelines?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pipelines"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Pipeline Name\",\n      \"url_title\": \"Pipeline-Name\",\n      \"order_nr\": 1,\n      \"active\": true,\n      \"deal_probability\": true,\n      \"add_time\": \"2017-08-03 12:51:18\",\n      \"update_time\": \"2020-03-23 13:15:25\",\n      \"selected\": true\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all pipelines - unauthorised user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"This is an unauthorised user \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"unauthorized access\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"   /* pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null; */\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pipelines",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pipelines"
									]
								},
								"description": "Returns data about all pipelines."
							},
							"response": [
								{
									"name": "Get all pipelines",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pipelines?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pipelines"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Pipeline Name\",\n      \"url_title\": \"Pipeline-Name\",\n      \"order_nr\": 1,\n      \"active\": true,\n      \"deal_probability\": true,\n      \"add_time\": \"2017-08-03 12:51:18\",\n      \"update_time\": \"2020-03-23 13:15:25\",\n      \"selected\": true\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all pipelines - invalid path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" // confirming status of resource creation on server\r",
											"pm.test(\"This is an invalid path \", function() {\r",
											"    pm.expect(pm.response.code).to.equal(404)\r",
											"});\r",
											"\r",
											"//converting response body to json format \r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"//Validating response body format\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Endpoint requires authentication\", function() {\r",
											"    pm.expect(jsonData.error).to.include(\"Not Found\");\r",
											"} )\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"//validating data type of all object in response body\r",
											"pm.test(\"Validating response body datatype\", function() {\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"  \r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pipelines1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pipelines1"
									]
								},
								"description": "Returns data about all pipelines."
							},
							"response": [
								{
									"name": "Get all pipelines",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pipelines?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pipelines"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Pipeline Name\",\n      \"url_title\": \"Pipeline-Name\",\n      \"order_nr\": 1,\n      \"active\": true,\n      \"deal_probability\": true,\n      \"add_time\": \"2017-08-03 12:51:18\",\n      \"update_time\": \"2020-03-23 13:15:25\",\n      \"selected\": true\n    }\n  ]\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Stages",
			"item": [
				{
					"name": "Create stage",
					"item": [
						{
							"name": "Add a new stage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
											"\r",
											"    let data = jsonData.data;\r",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");\r",
											"    pm.expect(data).to.have.property(\"order_nr\").that.is.a(\"number\");\r",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(data).to.have.property(\"active_flag\").that.is.a(\"boolean\");\r",
											"    pm.expect(data).to.have.property(\"deal_probability\").that.is.a(\"number\");\r",
											"    pm.expect(data).to.have.property(\"pipeline_id\").that.is.a(\"number\");\r",
											"    pm.expect(data).to.have.property(\"rotten_flag\").that.is.a(\"boolean\");\r",
											"    pm.expect(data).to.have.property(\"rotten_days\").that.is.a(\"number\");\r",
											"    pm.expect(data).to.have.property(\"add_time\").that.is.a(\"string\");\r",
											"    pm.expect(data).to.have.property(\"update_time\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Negotiation\",\n  \"pipeline_id\": {{pipelineID_1}},\n  \"deal_probability\": \"80\",\n  \"rotten_flag\": true,\n  \"rotten_days\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								},
								"description": "Adds a new stage, returns the ID upon success."
							},
							"response": [
								{
									"name": "Get all stages",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"pipeline_id\": \"<integer>\",\n  \"deal_probability\": \"<integer>\",\n  \"rotten_flag\": \"<boolean>\",\n  \"rotten_days\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/stages?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"order_nr\": 1,\n    \"name\": \"Stage Name\",\n    \"active_flag\": true,\n    \"deal_probability\": 100,\n    \"pipeline_id\": 1,\n    \"rotten_flag\": false,\n    \"rotten_days\": 1,\n    \"add_time\": \"2017-08-03 12:51:18\",\n    \"update_time\": \"2020-03-23 13:15:25\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a new stage- wrong url path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify wrong path response\", () => {\r",
											"    pm.response.to.have.status(404); // Ensure response status is 404\r",
											"    pm.response.to.be.json; // Ensure response is JSON\r",
											"    pm.expect(pm.response.json()).to.deep.equal({\r",
											"        \"success\": false,\r",
											"        \"error\": \"Not Found\"\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Negotiation\",\n  \"pipeline_id\": {{pipelineID_1}},\n  \"deal_probability\": \"80\",\n  \"rotten_flag\": true,\n  \"rotten_days\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/stagess",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stagess"
									]
								},
								"description": "Adds a new stage, returns the ID upon success."
							},
							"response": [
								{
									"name": "Get all stages",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"pipeline_id\": \"<integer>\",\n  \"deal_probability\": \"<integer>\",\n  \"rotten_flag\": \"<boolean>\",\n  \"rotten_days\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/stages?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"order_nr\": 1,\n    \"name\": \"Stage Name\",\n    \"active_flag\": true,\n    \"deal_probability\": 100,\n    \"pipeline_id\": 1,\n    \"rotten_flag\": false,\n    \"rotten_days\": 1,\n    \"add_time\": \"2017-08-03 12:51:18\",\n    \"update_time\": \"2020-03-23 13:15:25\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a new stage - missing required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate error response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"error_info\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;\r",
											"    pm.expect(jsonData).to.have.property(\"additional_data\").that.is.null;\r",
											"\r",
											"    pm.expect(jsonData.error).to.equal(\"pipeline_id not provided.\");\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\");\r",
											"});\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Negotiation\",\n  \"pipeline_id\": \"\",\n  \"deal_probability\": \"80\",\n  \"rotten_flag\": \"true\",\n  \"rotten_days\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								},
								"description": "Adds a new stage, returns the ID upon success."
							},
							"response": [
								{
									"name": "Get all stages",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"pipeline_id\": \"<integer>\",\n  \"deal_probability\": \"<integer>\",\n  \"rotten_flag\": \"<boolean>\",\n  \"rotten_days\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/stages?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"order_nr\": 1,\n    \"name\": \"Stage Name\",\n    \"active_flag\": true,\n    \"deal_probability\": 100,\n    \"pipeline_id\": 1,\n    \"rotten_flag\": false,\n    \"rotten_days\": 1,\n    \"add_time\": \"2017-08-03 12:51:18\",\n    \"update_time\": \"2020-03-23 13:15:25\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a new stage - invalid required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate error response structure and values\", () => \r",
											"    [  \r",
											"        pm.expect(jsonData).to.be.an(\"object\"),\r",
											"        pm.expect(jsonData.success).to.be.false,\r",
											"        pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\"),\r",
											"        pm.expect(jsonData).to.have.property(\"error_info\").that.is.a(\"string\"),\r",
											"        pm.expect(jsonData).to.have.property(\"data\").that.is.null,\r",
											"        pm.expect(jsonData).to.have.property(\"additional_data\").that.is.null,\r",
											"        pm.expect(jsonData.error).to.equal(\"Pipeline not found.\"),\r",
											"        pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com for more information about Pipedrive API.\")\r",
											"    ]\r",
											");\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Status code is 400\", () => pm.response.to.have.status(400));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Negotiation\",\n  \"pipeline_id\": \"120\",\n  \"deal_probability\": \"80\",\n  \"rotten_flag\": \"true\",\n  \"rotten_days\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								},
								"description": "Adds a new stage, returns the ID upon success."
							},
							"response": [
								{
									"name": "Get all stages",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"pipeline_id\": \"<integer>\",\n  \"deal_probability\": \"<integer>\",\n  \"rotten_flag\": \"<boolean>\",\n  \"rotten_days\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/stages?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"order_nr\": 1,\n    \"name\": \"Stage Name\",\n    \"active_flag\": true,\n    \"deal_probability\": 100,\n    \"pipeline_id\": 1,\n    \"rotten_flag\": false,\n    \"rotten_days\": 1,\n    \"add_time\": \"2017-08-03 12:51:18\",\n    \"update_time\": \"2020-03-23 13:15:25\"\n  }\n}"
								}
							]
						},
						{
							"name": "Add a new stage - unauthorised user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate error response structure and values\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"error_info\").that.is.a(\"string\");\r",
											"\r",
											" \r",
											"    pm.expect(jsonData.error).to.equal(\"unauthorized access\");\r",
											"    pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com\");\r",
											"});\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Negotiation\",\n  \"pipeline_id\": \"\",\n  \"deal_probability\": \"80\",\n  \"rotten_flag\": \"true\",\n  \"rotten_days\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/stages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									]
								},
								"description": "Adds a new stage, returns the ID upon success."
							},
							"response": [
								{
									"name": "Get all stages",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"pipeline_id\": \"<integer>\",\n  \"deal_probability\": \"<integer>\",\n  \"rotten_flag\": \"<boolean>\",\n  \"rotten_days\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/stages?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"order_nr\": 1,\n    \"name\": \"Stage Name\",\n    \"active_flag\": true,\n    \"deal_probability\": 100,\n    \"pipeline_id\": 1,\n    \"rotten_flag\": false,\n    \"rotten_days\": 1,\n    \"add_time\": \"2017-08-03 12:51:18\",\n    \"update_time\": \"2020-03-23 13:15:25\"\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Get all stages",
					"item": [
						{
							"name": "Get all stages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =\r",
											"pm.response.json();\r",
											"pm.environment.set(\"pipeId1_stage1\",\r",
											"jsonData.data[0].id);\r",
											"\r",
											"pm.environment.get(\"pipeId1_stage1\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate success response structure and values\", () => \r",
											"    [\r",
											"        pm.expect(jsonData).to.be.an(\"object\"),\r",
											"        pm.expect(jsonData.success).to.be.true,\r",
											"        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\").and.not.empty,\r",
											"\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"id\").that.is.a(\"number\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"order_nr\").that.is.a(\"number\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"name\").that.is.a(\"string\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"active_flag\").that.is.a(\"boolean\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"deal_probability\").that.is.a(\"number\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"pipeline_id\").that.is.a(\"number\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"rotten_flag\").that.is.a(\"boolean\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"rotten_days\").that.is.a(\"number\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"add_time\").that.is.a(\"string\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"update_time\").that.is.a(\"string\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"pipeline_name\").that.is.a(\"string\"),\r",
											"        pm.expect(jsonData.data[0]).to.have.property(\"pipeline_deal_probability\").that.is.a(\"boolean\")\r",
											"    ]\r",
											");\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stages?pipeline_id={{pipelineID_1}}&start=0&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "pipeline_id",
											"value": "{{pipelineID_1}}",
											"description": "The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched."
										},
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Items shown per page"
										}
									]
								},
								"description": "Returns data about all stages."
							},
							"response": [
								{
									"name": "Get all stages",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stages?pipeline_id=<integer>&start=0&limit=<integer>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages"
											],
											"query": [
												{
													"key": "pipeline_id",
													"value": "<integer>"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"order_nr\": 1,\n      \"name\": \"Stage Name\",\n      \"active_flag\": true,\n      \"deal_probability\": 100,\n      \"pipeline_id\": 1,\n      \"rotten_flag\": false,\n      \"rotten_days\": 1,\n      \"add_time\": \"2017-08-03 12:51:18\",\n      \"update_time\": \"2020-03-23 13:15:25\",\n      \"pipeline_name\": \"Pipeline\",\n      \"pipeline_deal_probability\": false\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Get all stages - unauthorised user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Store pipeline stage ID in environment variable\r",
											"\r",
											"\r",
											"// Validate response structure and values\r",
											"pm.test(\"Validate error response structure and values\", () => \r",
											"    [\r",
											"        pm.expect(jsonData).to.be.an(\"object\"),\r",
											"        pm.expect(jsonData.success).to.be.false,\r",
											"        pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\"),\r",
											"        pm.expect(jsonData).to.have.property(\"error_info\").that.is.a(\"string\"),\r",
											"        pm.expect(jsonData.error).to.equal(\"unauthorized access\"),\r",
											"        pm.expect(jsonData.error_info).to.equal(\"Please check developers.pipedrive.com\")\r",
											"    ]\r",
											");\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Status code is 401\", () => pm.response.to.have.status(401));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stages?pipeline_id={{pipelineID_1}}&start=0&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stages"
									],
									"query": [
										{
											"key": "pipeline_id",
											"value": "{{pipelineID_1}}",
											"description": "The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched."
										},
										{
											"key": "start",
											"value": "0",
											"description": "Pagination start"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Items shown per page"
										}
									]
								},
								"description": "Returns data about all stages."
							},
							"response": [
								{
									"name": "Get all stages",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stages?pipeline_id=<integer>&start=0&limit=<integer>&api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stages"
											],
											"query": [
												{
													"key": "pipeline_id",
													"value": "<integer>"
												},
												{
													"key": "start",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"order_nr\": 1,\n      \"name\": \"Stage Name\",\n      \"active_flag\": true,\n      \"deal_probability\": 100,\n      \"pipeline_id\": 1,\n      \"rotten_flag\": false,\n      \"rotten_days\": 1,\n      \"add_time\": \"2017-08-03 12:51:18\",\n      \"update_time\": \"2020-03-23 13:15:25\",\n      \"pipeline_name\": \"Pipeline\",\n      \"pipeline_deal_probability\": false\n    }\n  ],\n  \"additional_data\": {\n    \"pagination\": {\n      \"start\": 0,\n      \"limit\": 100,\n      \"more_items_in_collection\": false\n    }\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Deal",
			"item": [
				{
					"name": "Add a deal",
					"item": [
						{
							"name": "Add a deal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData=pm.response.json();\r",
											"pm.environment.set(\"deal_id\",jsonData.data.id);\r",
											"pm.environment.get(\"deal_id\");\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Validate response structure\r",
											"pm.test(\"Valid response structure\", function() {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
											"    pm.expect(jsonData).to.have.property(\"related_objects\").that.is.an(\"object\");\r",
											"});\r",
											"\r",
											"// Validate success flag\r",
											"pm.test(\"Success flag is true\", function() {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Validate data properties\r",
											"pm.test(\"Data object has expected properties\", function() {\r",
											"    pm.expect(jsonData.data).to.have.property(\"id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"creator_user_id\").that.is.an(\"object\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"user_id\").that.is.an(\"object\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"person_id\").that.is.an(\"object\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"org_id\").that.is.an(\"object\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"stage_id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"title\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"value\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"currency\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"probability\").that.is.a(\"number\");\r",
											"});\r",
											"\r",
											"// Validate person email and phone structure\r",
											"pm.test(\"Person email and phone structure\", function() {\r",
											"    pm.expect(jsonData.data.person_id.email).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.person_id.phone).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.person_id.email[0]).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data.person_id.phone[0]).to.have.property(\"value\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate organization properties\r",
											"pm.test(\"Organization properties\", function() {\r",
											"    pm.expect(jsonData.data.org_id).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.data.org_id).to.have.property(\"people_count\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData.data.org_id).to.have.property(\"active_flag\").that.is.a(\"boolean\");\r",
											"});\r",
											"\r",
											"// Validate expected close date\r",
											"pm.test(\"Expected close date format\", function() {\r",
											"    pm.expect(jsonData.data.expected_close_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"});\r",
											"\r",
											"// Validate response status code\r",
											"pm.test(\"Status code is 201\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();\r",
											"pm.environment.set(\"add_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"{{$randomProductName}}\",\n  \"value\": \"1500000\",\n  \"currency\": \"{{NIGERIA_CURR}}\",\n  \"user_id\": {{user_id}},\n  \"person_id\": {{person_id_1}},\n  \"org_id\": {{organization_id_1}},\n  \"pipeline_id\": {{pipelineID_1}},\n  \"stage_id\": {{pipeId1_stage1}},\n  \"status\": \"open\",\n  \"origin_id\": \"{{lead_id}}\",\n /* \"channel\": \"{{channeL1_id}}\",\n  \"channel_id\": \"{{channeL1_name}}\",*/\n  \"add_time\": \"{{add_time}}\",\n  \"won_time\": \"\",\n  \"lost_time\": \"\",\n  \"close_time\": \"\",\n  \"expected_close_date\": \"{{expected_close_date}}\",\n  \"probability\": 80,\n  \"lost_reason\": \"\",\n  \"visible_to\": \"3\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deals",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deals"
									]
								},
								"description": "Adds a new deal. All deals created through the Pipedrive API will have a `origin` set to `API`. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>."
							},
							"response": [
								{
									"name": "Add a deal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"value\": \"<string>\",\n  \"label\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"currency\": \"<string>\",\n  \"user_id\": \"<integer>\",\n  \"person_id\": \"<integer>\",\n  \"org_id\": \"<integer>\",\n  \"pipeline_id\": \"<integer>\",\n  \"stage_id\": \"<integer>\",\n  \"status\": \"<string>\",\n  \"origin_id\": \"<string>\",\n  \"channel\": \"<integer>\",\n  \"channel_id\": \"<string>\",\n  \"add_time\": \"<string>\",\n  \"won_time\": \"<string>\",\n  \"lost_time\": \"<string>\",\n  \"close_time\": \"<string>\",\n  \"expected_close_date\": \"<date>\",\n  \"probability\": \"<number>\",\n  \"lost_reason\": \"<string>\",\n  \"visible_to\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/deals?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deals"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"creator_user_id\": {\n      \"id\": 8877,\n      \"name\": \"Creator\",\n      \"email\": \"john.doe@pipedrive.com\",\n      \"has_pic\": false,\n      \"pic_hash\": null,\n      \"active_flag\": true,\n      \"value\": 8877\n    },\n    \"user_id\": {\n      \"id\": 8877,\n      \"name\": \"Creator\",\n      \"email\": \"john.doe@pipedrive.com\",\n      \"has_pic\": false,\n      \"pic_hash\": null,\n      \"active_flag\": true,\n      \"value\": 8877\n    },\n    \"person_id\": {\n      \"active_flag\": true,\n      \"name\": \"Person\",\n      \"email\": [\n        {\n          \"label\": \"work\",\n          \"value\": \"person@pipedrive.com\",\n          \"primary\": true\n        }\n      ],\n      \"phone\": [\n        {\n          \"label\": \"work\",\n          \"value\": \"37244499911\",\n          \"primary\": true\n        }\n      ],\n      \"value\": 1101\n    },\n    \"org_id\": {\n      \"name\": \"Organization\",\n      \"people_count\": 2,\n      \"owner_id\": 8877,\n      \"address\": \"\",\n      \"active_flag\": true,\n      \"cc_email\": \"org@pipedrivemail.com\",\n      \"value\": 5\n    },\n    \"stage_id\": 2,\n    \"title\": \"Deal One\",\n    \"value\": 5000,\n    \"currency\": \"EUR\",\n    \"add_time\": \"2019-05-29 04:21:51\",\n    \"update_time\": \"2019-11-28 16:19:50\",\n    \"stage_change_time\": \"2019-11-28 15:41:22\",\n    \"active\": true,\n    \"deleted\": false,\n    \"status\": \"open\",\n    \"probability\": null,\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": null,\n    \"last_activity_date\": null,\n    \"lost_reason\": null,\n    \"visible_to\": \"1\",\n    \"close_time\": null,\n    \"pipeline_id\": 1,\n    \"won_time\": \"2019-11-27 11:40:36\",\n    \"first_won_time\": \"2019-11-27 11:40:36\",\n    \"lost_time\": \"\",\n    \"products_count\": 0,\n    \"files_count\": 0,\n    \"notes_count\": 2,\n    \"followers_count\": 0,\n    \"email_messages_count\": 4,\n    \"activities_count\": 1,\n    \"done_activities_count\": 0,\n    \"undone_activities_count\": 1,\n    \"participants_count\": 1,\n    \"expected_close_date\": \"2019-06-29\",\n    \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n    \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n    \"label\": \"11\",\n    \"origin\": \"API\",\n    \"origin_id\": \"Zapier\",\n    \"channel\": 16,\n    \"channel_id\": null,\n    \"stage_order_nr\": 2,\n    \"person_name\": \"Person\",\n    \"org_name\": \"Organization\",\n    \"next_activity_subject\": \"Call\",\n    \"next_activity_type\": \"call\",\n    \"next_activity_duration\": \"00:30:00\",\n    \"next_activity_note\": \"Note content\",\n    \"formatted_value\": \"€5,000\",\n    \"weighted_value\": 5000,\n    \"formatted_weighted_value\": \"€5,000\",\n    \"weighted_value_currency\": \"EUR\",\n    \"rotten_time\": null,\n    \"owner_name\": \"Creator\",\n    \"cc_email\": \"company+deal1@pipedrivemail.com\",\n    \"org_hidden\": false,\n    \"person_hidden\": false,\n    \"acv\": null,\n    \"arr\": null,\n    \"mrr\": null,\n    \"acv_currency\": null,\n    \"arr_currency\": null,\n    \"mrr_currency\": null\n  },\n  \"related_objects\": {\n    \"user\": {\n      \"8877\": {\n        \"id\": 8877,\n        \"name\": \"Creator\",\n        \"email\": \"john.doe@pipedrive.com\",\n        \"has_pic\": false,\n        \"pic_hash\": null,\n        \"active_flag\": true\n      }\n    },\n    \"organization\": {\n      \"2\": {\n        \"id\": 2,\n        \"name\": \"Organization\",\n        \"people_count\": 2,\n        \"owner_id\": 8877,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"person\": {\n      \"1101\": {\n        \"active_flag\": true,\n        \"id\": 1101,\n        \"name\": \"Person\",\n        \"email\": [\n          {\n            \"label\": \"work\",\n            \"value\": \"person@pipedrive.com\",\n            \"primary\": true\n          }\n        ],\n        \"phone\": [\n          {\n            \"label\": \"work\",\n            \"value\": \"3421787767\",\n            \"primary\": true\n          }\n        ],\n        \"owner_id\": 8877\n      }\n    },\n    \"stage\": {\n      \"2\": {\n        \"id\": 2,\n        \"company_id\": 123,\n        \"order_nr\": 1,\n        \"name\": \"Stage Name\",\n        \"active_flag\": true,\n        \"deal_probability\": 100,\n        \"pipeline_id\": 1,\n        \"rotten_flag\": false,\n        \"rotten_days\": null,\n        \"add_time\": \"2015-12-08 13:54:06\",\n        \"update_time\": \"2015-12-08 13:54:06\",\n        \"pipeline_name\": \"Pipeline\",\n        \"pipeline_deal_probability\": true\n      }\n    },\n    \"pipeline\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Pipeline\",\n        \"url_title\": \"Pipeline\",\n        \"order_nr\": 0,\n        \"active\": true,\n        \"deal_probability\": true,\n        \"add_time\": \"2015-12-08 10:00:24\",\n        \"update_time\": \"2015-12-08 10:00:24\"\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Add a deal forbidden user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData=pm.response.json();\r",
											"\r",
											"\r",
											"//validating responseBody structure\r",
											"pm.test(\"valid responseBody\", \r",
											"function() {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error_info).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data).to.be.null;\r",
											"    pm.expect(jsonData.additional_data).to.be.null;\r",
											"});\r",
											"\r",
											"//validate response message\r",
											"pm.test(\"valid response structures\", function()\r",
											"{\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"    pm.expect(jsonData.error).to.include(\"You do not have permissions to do this\");\r",
											"    pm.expect(jsonData.error_info).to.include(\"Please check developers.pipedrive.com\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentTime = new Date().toISOString();\r",
											"pm.environment.set(\"add_time\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Paint and sip boards\",\n  \"value\": \"1500000\",\n  \"currency\": \"{{NIGERIA_CURR}}\",\n  \"user_id\": {{UserID_1}},\n  \"person_id\": {{person_id_1}},\n  \"org_id\": {{organization_id_1}},\n  \"pipeline_id\": {{pipelineID_1}},\n  \"stage_id\": {{pipeId1_stage1}},\n  \"status\": \"open\",\n  \"origin_id\": \"{{lead_id}}\",\n /* \"channel\": \"{{channeL1_id}}\",\n  \"channel_id\": \"{{channeL1_name}}\",*/\n  \"add_time\": \"{{add_time}}\",\n  \"won_time\": \"\",\n  \"lost_time\": \"\",\n  \"close_time\": \"\",\n  \"expected_close_date\": \"{{expected_close_date}}\",\n  \"probability\": 80,\n  \"lost_reason\": \"\",\n  \"visible_to\": \"3\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deals",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deals"
									]
								},
								"description": "Adds a new deal. All deals created through the Pipedrive API will have a `origin` set to `API`. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>."
							},
							"response": [
								{
									"name": "Add a deal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"value\": \"<string>\",\n  \"label\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"currency\": \"<string>\",\n  \"user_id\": \"<integer>\",\n  \"person_id\": \"<integer>\",\n  \"org_id\": \"<integer>\",\n  \"pipeline_id\": \"<integer>\",\n  \"stage_id\": \"<integer>\",\n  \"status\": \"<string>\",\n  \"origin_id\": \"<string>\",\n  \"channel\": \"<integer>\",\n  \"channel_id\": \"<string>\",\n  \"add_time\": \"<string>\",\n  \"won_time\": \"<string>\",\n  \"lost_time\": \"<string>\",\n  \"close_time\": \"<string>\",\n  \"expected_close_date\": \"<date>\",\n  \"probability\": \"<number>\",\n  \"lost_reason\": \"<string>\",\n  \"visible_to\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/deals?api_token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deals"
											],
											"query": [
												{
													"key": "api_token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"creator_user_id\": {\n      \"id\": 8877,\n      \"name\": \"Creator\",\n      \"email\": \"john.doe@pipedrive.com\",\n      \"has_pic\": false,\n      \"pic_hash\": null,\n      \"active_flag\": true,\n      \"value\": 8877\n    },\n    \"user_id\": {\n      \"id\": 8877,\n      \"name\": \"Creator\",\n      \"email\": \"john.doe@pipedrive.com\",\n      \"has_pic\": false,\n      \"pic_hash\": null,\n      \"active_flag\": true,\n      \"value\": 8877\n    },\n    \"person_id\": {\n      \"active_flag\": true,\n      \"name\": \"Person\",\n      \"email\": [\n        {\n          \"label\": \"work\",\n          \"value\": \"person@pipedrive.com\",\n          \"primary\": true\n        }\n      ],\n      \"phone\": [\n        {\n          \"label\": \"work\",\n          \"value\": \"37244499911\",\n          \"primary\": true\n        }\n      ],\n      \"value\": 1101\n    },\n    \"org_id\": {\n      \"name\": \"Organization\",\n      \"people_count\": 2,\n      \"owner_id\": 8877,\n      \"address\": \"\",\n      \"active_flag\": true,\n      \"cc_email\": \"org@pipedrivemail.com\",\n      \"value\": 5\n    },\n    \"stage_id\": 2,\n    \"title\": \"Deal One\",\n    \"value\": 5000,\n    \"currency\": \"EUR\",\n    \"add_time\": \"2019-05-29 04:21:51\",\n    \"update_time\": \"2019-11-28 16:19:50\",\n    \"stage_change_time\": \"2019-11-28 15:41:22\",\n    \"active\": true,\n    \"deleted\": false,\n    \"status\": \"open\",\n    \"probability\": null,\n    \"next_activity_date\": \"2019-11-29\",\n    \"next_activity_time\": \"11:30:00\",\n    \"next_activity_id\": 128,\n    \"last_activity_id\": null,\n    \"last_activity_date\": null,\n    \"lost_reason\": null,\n    \"visible_to\": \"1\",\n    \"close_time\": null,\n    \"pipeline_id\": 1,\n    \"won_time\": \"2019-11-27 11:40:36\",\n    \"first_won_time\": \"2019-11-27 11:40:36\",\n    \"lost_time\": \"\",\n    \"products_count\": 0,\n    \"files_count\": 0,\n    \"notes_count\": 2,\n    \"followers_count\": 0,\n    \"email_messages_count\": 4,\n    \"activities_count\": 1,\n    \"done_activities_count\": 0,\n    \"undone_activities_count\": 1,\n    \"participants_count\": 1,\n    \"expected_close_date\": \"2019-06-29\",\n    \"last_incoming_mail_time\": \"2019-05-29 18:21:42\",\n    \"last_outgoing_mail_time\": \"2019-05-30 03:45:35\",\n    \"label\": \"11\",\n    \"origin\": \"API\",\n    \"origin_id\": \"Zapier\",\n    \"channel\": 16,\n    \"channel_id\": null,\n    \"stage_order_nr\": 2,\n    \"person_name\": \"Person\",\n    \"org_name\": \"Organization\",\n    \"next_activity_subject\": \"Call\",\n    \"next_activity_type\": \"call\",\n    \"next_activity_duration\": \"00:30:00\",\n    \"next_activity_note\": \"Note content\",\n    \"formatted_value\": \"€5,000\",\n    \"weighted_value\": 5000,\n    \"formatted_weighted_value\": \"€5,000\",\n    \"weighted_value_currency\": \"EUR\",\n    \"rotten_time\": null,\n    \"owner_name\": \"Creator\",\n    \"cc_email\": \"company+deal1@pipedrivemail.com\",\n    \"org_hidden\": false,\n    \"person_hidden\": false,\n    \"acv\": null,\n    \"arr\": null,\n    \"mrr\": null,\n    \"acv_currency\": null,\n    \"arr_currency\": null,\n    \"mrr_currency\": null\n  },\n  \"related_objects\": {\n    \"user\": {\n      \"8877\": {\n        \"id\": 8877,\n        \"name\": \"Creator\",\n        \"email\": \"john.doe@pipedrive.com\",\n        \"has_pic\": false,\n        \"pic_hash\": null,\n        \"active_flag\": true\n      }\n    },\n    \"organization\": {\n      \"2\": {\n        \"id\": 2,\n        \"name\": \"Organization\",\n        \"people_count\": 2,\n        \"owner_id\": 8877,\n        \"address\": \"Mustamäe tee 3a, 10615 Tallinn\",\n        \"active_flag\": true,\n        \"cc_email\": \"org@pipedrivemail.com\"\n      }\n    },\n    \"person\": {\n      \"1101\": {\n        \"active_flag\": true,\n        \"id\": 1101,\n        \"name\": \"Person\",\n        \"email\": [\n          {\n            \"label\": \"work\",\n            \"value\": \"person@pipedrive.com\",\n            \"primary\": true\n          }\n        ],\n        \"phone\": [\n          {\n            \"label\": \"work\",\n            \"value\": \"3421787767\",\n            \"primary\": true\n          }\n        ],\n        \"owner_id\": 8877\n      }\n    },\n    \"stage\": {\n      \"2\": {\n        \"id\": 2,\n        \"company_id\": 123,\n        \"order_nr\": 1,\n        \"name\": \"Stage Name\",\n        \"active_flag\": true,\n        \"deal_probability\": 100,\n        \"pipeline_id\": 1,\n        \"rotten_flag\": false,\n        \"rotten_days\": null,\n        \"add_time\": \"2015-12-08 13:54:06\",\n        \"update_time\": \"2015-12-08 13:54:06\",\n        \"pipeline_name\": \"Pipeline\",\n        \"pipeline_deal_probability\": true\n      }\n    },\n    \"pipeline\": {\n      \"1\": {\n        \"id\": 1,\n        \"name\": \"Pipeline\",\n        \"url_title\": \"Pipeline\",\n        \"order_nr\": 0,\n        \"active\": true,\n        \"deal_probability\": true,\n        \"add_time\": \"2015-12-08 10:00:24\",\n        \"update_time\": \"2015-12-08 10:00:24\"\n      }\n    }\n  }\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//validating Content_type\r",
					"pm.test(\"Content-Type is not missing\", function() {\r",
					"    let contentType = pm.response.headers.get(\"Content-Type\"); // Correct key\r",
					"    pm.expect(contentType, \"Content-Type header is missing\").to.not.be.undefined;\r",
					"});\r",
					"\r",
					"\r",
					"//validating responseTime\r",
					"pm.test(\"Response time is less than 3000ms\", function() {\r",
					"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
					"})\r",
					"\r",
					"\r",
					"\r",
					"\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.pipedrive.com/v1",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "985f9e84cd49e68cc2d9dc66cb9060ff0b0c74cd",
			"type": "string"
		}
	]
}